{
    "docs": [
        {
            "location": "/",
            "text": "NuWro is a Monte Carlo neutrino event generator. It has been developed since 2006 at the University of Wroclaw. It includes all basic dynamics for neutrino scattering processes (for both neutral and charged currents):\n\n\n\n\n(quasi-) elastic scattering\n\n\nsingle pion production through Delta(1232) resonance (including non-resonant background)\n\n\ndeep inelastic scattering\n (or in other words - more inelastic than Delta resonance)\n\n\ntwo-body current contribution to (quasi-) elastic scattering\n\n\ncoherent pion production\n\n\n\n\nIn the first three cases interactions occur on a single nucleon from a nucleus in the Impulse Approximation regime. Two-body current scattering goes beyond Impulse Approximation and neutrino interacts with at least two nucleons. Coherent pion production occurs on a whole nucleus. For all dynamics, but the coherent, the primary vertex is followed by final state interactions based on the intra-nuclear cascade model.\n\n\nNuWro provides a multiplicity of choices for a description of a target nucleus, including Fermi gas and spectral function. It also contains various parameterizations of nuclear form factors. Many quantum effects, like Pauli blocking or formation zone, are included.\n\n\nThe generator has a detector geometry module and can handle realistic neutrino beams. All together\nmakes NuWro a complete tool to use in neutrino experiments.\n\n\nThis wiki describes technical aspect of using NuWro rather than physics implemented in the generator. For the latter please see \nthe publication list\n.\n\n\nCredits\n\n\n\n\n\n\n\n\nCurrently involved in the project:\n\n\n\n    \nJan Sobczyk\n\n    \nCezary Juszczak\n\n    \nTomasz Golan\n\n    \nKajetan Niewczas\n\n    \nKrzysztof Graczyk\n\n\n\n\nFormer members:\n\n\n\n    \nJaros\u0142aw Nowak\n\n    \nJakub \u017bmuda\n\n\n\n\n\n\n\n\n\nSignificant contribution:\n\n\n\n    \nArtur Kobyli\u0144ski\n\n    \nMaciej Tabiszewski\n\n    \nPawe\u0142 Przew\u0142ocki\n\n    \nLuke Pickering\n\n    \nPatrick Stowell",
            "title": "About"
        },
        {
            "location": "/getting-started/installation/",
            "text": "Getting NuWro\n\u00b6\n\n\nTo get the most up to date version of NuWro use:\n\n\ngit clone https://github.com/NuWro/nuwro.git\n\n\n\n\n\nTo get one of the stable releases use:\n\n\ngit clone -b \n[\nrelease tag\n]\n https://github.com/NuWro/nuwro.git\n\n\n\n\n\ne.g.\n\n\ngit clone -b nuwro_17.01 https://github.com/NuWro/nuwro.git\n\n\n\n\n\n\n\ngit version older than 1.7.10\n\n\ngit clone -b [release tag]\n will not work for git older than 1.7.10\n(but it is from May 2012 so you may consider updating your system).\n\n\nTo get specific release you can use \ngit checkout tags/[release tag]\n, e.g.\n\n\ngit clone https://github.com/NuWro/nuwro.git\ngit checkout tags/nuwro_17.01\n\n\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\nROOT\n\n\nPYTHIA6\n\n\n\n\nBuilding ROOT with PYTHIA6 support\n\u00b6\n\n\n\n\ndownload \nROOT source code\n\n\nmake sure you have all \nROOT dependencies\n installed\n\n\ndownload \nPYTHIA6 source code\n\n\nbuild PYTHIA6 shared object (\nlibPythia6.so\n):\n\n\n\n\ntar -xzvf pythia6.tar.gz\n\ncd\n pythia6 \n&&\n ./makePythia6.linux\n\n\n\n\n\n\n\nIt requires \ngfortran\n Fortran compiler.\n\n\n\n\n\n\ncopy \nlibPythia6.so\n to \nroot/lib\n folder:\n\n\n\n\ntar -zxvf root_v*.source.tar.gz\nmkdir root/lib\ncp pythia6/libPythia6.so root/lib\n\n\n\n\n\n\n\nconfigure ROOT:\n\n\n\n\ncd\n root \n&&\n ./configure --with-pythia6-libdir\n=\nlib\n\n\n\n\n\n\n\nand make it:\n\n\n\n\nmake\n\n\n\n\n\n\n\nset environmental variables:\n\n\n\n\nexport\n \nROOTSYS\n=(\npath to root directory\n)\n\n\nexport\n \nPATH\n=\n$PATH\n:\n$ROOTSYS\n/bin\n\nexport\n \nLD_LIBRARY_PATH\n=\n$LD_LIBRARY_PATH\n:\n$ROOTSYS\n/lib\n\n\n\n\n\nyou can use the script provided by ROOT (\nbin/this_root.sh\n) that includes the commands and run \nsource bin/this_root.sh\n every time you start a terminal or add the above lines to either \n~/.bashrc\n or \n~/.bash_profile\n.\n\n\n\n\nmacOS support\n\n\nNuWro has been tested to work properly on the following configuration\n\n\nx86_64-apple-darwin15.6.0\nclang-800.0.42.1\nroot-5.34.36\n\n\n\n\n\nWhile installing on macOS one should remember about the following differences:\n\n\n\n\nPYTHIA6 should be compiled using the \n./makePythia6.macosx64\n command,\n\n\nthe shared object of PYTHIA6 is called \nlibPythia6.dylib\n,\n\n\nthe bash profile file is called \n~/.profile\n.\n\n\n\n\nNote that the following problems are known to emerge:\n\n\n\n\nNuWro has not yet been configured to work with ROOT6 under macOS,\n\n\n\n\nwhile installing \ngfortran\n via Homebrew the \nlibgfortran.dylib\n file is not properly linked for the C compiler, one should export the variable \nLIBRARY_PATH\n with the path to the lib file.\n\ne.g. put into \n~/.profile\n the following line (it will depend on the \ngfortran\n installation)\n\n\nexport LIBRARY_PATH=/usr/local/lib/gcc/6\n\n\n\n\n\n\n\n\nBuilding NuWro\n\u00b6\n\n\nOnce you have ROOT installed with PYTHIA6 support just make NuWro:\n\n\ntar -zxvf nuwro-*.tar.gz\n\ncd\n nuwro \n&&\n make\n\n\n\n\n\nTroubleshooting\n\u00b6\n\n\n\n\nIf you have troubles to compile ROOT with gcc5 compiler\nand getting errors about undefined references to \nstd::__cxx11\n\n(described \nhere\n),\nyou can add the following flag:\n\n\n\n\n-D_GLIBCXX_USE_CXX11_ABI\n=\n0\n\n\n\n\n\n\nto \nCFLAGS\n in proper \n[root]/config/Makefile.[system]\n file.",
            "title": "Installation"
        },
        {
            "location": "/getting-started/installation/#getting-nuwro",
            "text": "To get the most up to date version of NuWro use:  git clone https://github.com/NuWro/nuwro.git  To get one of the stable releases use:  git clone -b  [ release tag ]  https://github.com/NuWro/nuwro.git  e.g.  git clone -b nuwro_17.01 https://github.com/NuWro/nuwro.git   git version older than 1.7.10  git clone -b [release tag]  will not work for git older than 1.7.10\n(but it is from May 2012 so you may consider updating your system).  To get specific release you can use  git checkout tags/[release tag] , e.g.  git clone https://github.com/NuWro/nuwro.git\ngit checkout tags/nuwro_17.01",
            "title": "Getting NuWro"
        },
        {
            "location": "/getting-started/installation/#dependencies",
            "text": "ROOT  PYTHIA6",
            "title": "Dependencies"
        },
        {
            "location": "/getting-started/installation/#building-root-with-pythia6-support",
            "text": "download  ROOT source code  make sure you have all  ROOT dependencies  installed  download  PYTHIA6 source code  build PYTHIA6 shared object ( libPythia6.so ):   tar -xzvf pythia6.tar.gz cd  pythia6  &&  ./makePythia6.linux   It requires  gfortran  Fortran compiler.    copy  libPythia6.so  to  root/lib  folder:   tar -zxvf root_v*.source.tar.gz\nmkdir root/lib\ncp pythia6/libPythia6.so root/lib   configure ROOT:   cd  root  &&  ./configure --with-pythia6-libdir = lib   and make it:   make   set environmental variables:   export   ROOTSYS =( path to root directory )  export   PATH = $PATH : $ROOTSYS /bin export   LD_LIBRARY_PATH = $LD_LIBRARY_PATH : $ROOTSYS /lib  you can use the script provided by ROOT ( bin/this_root.sh ) that includes the commands and run  source bin/this_root.sh  every time you start a terminal or add the above lines to either  ~/.bashrc  or  ~/.bash_profile .   macOS support  NuWro has been tested to work properly on the following configuration  x86_64-apple-darwin15.6.0\nclang-800.0.42.1\nroot-5.34.36  While installing on macOS one should remember about the following differences:   PYTHIA6 should be compiled using the  ./makePythia6.macosx64  command,  the shared object of PYTHIA6 is called  libPythia6.dylib ,  the bash profile file is called  ~/.profile .   Note that the following problems are known to emerge:   NuWro has not yet been configured to work with ROOT6 under macOS,   while installing  gfortran  via Homebrew the  libgfortran.dylib  file is not properly linked for the C compiler, one should export the variable  LIBRARY_PATH  with the path to the lib file. \ne.g. put into  ~/.profile  the following line (it will depend on the  gfortran  installation)  export LIBRARY_PATH=/usr/local/lib/gcc/6",
            "title": "Building ROOT with PYTHIA6 support"
        },
        {
            "location": "/getting-started/installation/#building-nuwro",
            "text": "Once you have ROOT installed with PYTHIA6 support just make NuWro:  tar -zxvf nuwro-*.tar.gz cd  nuwro  &&  make",
            "title": "Building NuWro"
        },
        {
            "location": "/getting-started/installation/#troubleshooting",
            "text": "If you have troubles to compile ROOT with gcc5 compiler\nand getting errors about undefined references to  std::__cxx11 \n(described  here ),\nyou can add the following flag:   -D_GLIBCXX_USE_CXX11_ABI = 0   to  CFLAGS  in proper  [root]/config/Makefile.[system]  file.",
            "title": "Troubleshooting"
        },
        {
            "location": "/getting-started/running/",
            "text": "Basics\n\u00b6\n\n\nAfter a successful installation you will find \nnuwro\n executable in \nnuwro/bin\n\nfolder. \n\n\n\n\nHint\n\n\nYou can run NuWro providing the path to \nnuwro\n\nor you can add \nnuwro/bin\n to \n$PATH\n by adding the following line\nto your \n~/.bashrc\n:\n\n\nexport PATH=(path to nuwro)/bin:$PATH\n\n\n\n\n\n\n\nNuWro does not require any command line arguments, although there are several\noptional arguments:\n\n\n\n\n-o\n to provide the path for output files\n\n\n-i\n to provide the path to an input file with simulation settings\n\n\n-p\n to change a single simulation parameter w.r.t to the input file\n(this one can be use multiple times)\n\n\n\n\nIn general, the command to run NuWro would look like this:\n\n\nnuwro [-o output root file] \\\n      [-i input parameters file] \\\n      [-p \"parameter name 1 = value 1\"] \\\n      [-p \"parameter name 2 = value 2\"] \\\n      ...\n      [-p \"parameter name N = value N\"]\n\n\n\n\n\n\n\nWhen running RES and DIS channel you will see many PYTHIA warnings about\ncatching an infinite loop - just ignore them. \n\n\n\n\nInput\n\u00b6\n\n\nThe path to a simulation settings file can be provided with \n-i\n option.\n\n\n\n\nNote\n\n\nIf the path to a simulation settings file is not provided:\n\n\n\n\n$PWD/params.txt\n will be used or\n\n\nnuwro/data/params.txt\n will be used or\n\n\nhard-coded default settings will be used.\n\n\n\n\n\n\nThe example settings file can be found in \nnuwro/data/params.txt\n. \nIt is recommended to copy this file to the working directory\nand modify as needed.\n\n\nThe list of available settings can be found in \nparameters section\n.\n\n\n\n\nExample\n\n\nCopy default settings files to your working directory:\n\n\ncp /path/to/nuwro/data/params.txt .\n\n\n\n\n\nmodify as needed and run NuWro:\n\n\nnuwro\n\n\n\n\n\nNote: If \nnuwro/bin\n is not in \n$PATH\n you need to provide the full path.\n\n\n\n\n\n\nExample\n\n\nCopy default settings files:\n\n\ncp /path/to/nuwro/data/params.txt /some/path/my_params.txt\n\n\n\n\n\nmodify as needed and run NuWro providing the path to \nmy_params.txt\n:\n\n\nnuwro -i /some/path/my_params.txt\n\n\n\n\n\n\n\nParameters from a settings file can be modified using \n-p\n option.\nIt is useful if you need to perform several simulations with only small changes\nto settings.\n\n\n\n\nExample\n\n\nLet \n/some/path/my_params.txt\n be you base configuration.\nThe following bash script:\n\n\n1\n2\n3\n4\n5\n6\n7\n#!/bin/sh\n\n\nfor\n Ma in \n$(\nseq \n1000\n \n100\n \n1300\n)\n\n\ndo\n\n    nuwro -i /some/path/my_params.txt \n\\\n\n          -o my_output_\n$Ma\n.root \n\\\n\n          -p \n\"qel_cc_axial_mass = \n$Ma\n\"\n\n\ndone\n\n\n\n\n\n\n\nwill perform 4 simulations with the same settings but axial mass.\n\n\n\n\nOutput\n\u00b6\n\n\nNuWro produces three output files:\n\n\n\n\n$PWD/eventsout.root\n with an events tree\n\n\n$PWD/eventsout.root.txt\n with flux-integrated cross sections\n\n\n$PWD/eventsout.root.par\n with parameters used for the simulation\n\n\n\n\nThe output path can be changed with \n-o\n option.\n\n\n\n\nExample\n\n\nThe following command:\n\n\nnuwro -o /path/to/simulation.root\n\n\n\n\n\nwill produce the following output files:\n\n\n\n\n/path/to/simulation.root\n\n\n/path/to/simulation.root.txt\n\n\n/path/to/simulation.root.par\n\n\n\n\n\n\nThe instruction on how to work with NuWro output files can be found \nhere\n.\n\n\nExamples\n\u00b6\n\n\nThe list of all available settings\n(as well as instruction on how to define beam and target)\ncan be found in \nparameters section\n.\n\n\nThis section is just to demonstrate basic usage.\n\n\nCCQE on Carbon\n\u00b6\n\n\nWe want to perform the following simulation:\n\n\n\n\nmuon neutrino\n\n\nmono-energetic beam 1 GeV\n\n\ntarget = Carbon\n\n\nonly CCQE dynamics\n\n\n\n\nLets start with grabbing the default settings file,\nwhich we are going to modify for our needs:\n\n\ncp /path/to/nuwro/data/params.txt ccqe_carbon.txt\n\n\n\n\n\n1. Setting the beam\n\u00b6\n\n\nLocate \"Beam specification\" section and make sure\nthat all beam related settings are commented (including includes \n@beam/...\n).\n\n\nAdd the following lines to define the beam:\n\n\nbeam_type = 0\nbeam_particle = 14\nbeam_energy = 1000\n\n\n\n\n\n2. Setting the target\n\u00b6\n\n\nLocate \"Target specification\" section and make sure\nthat all target related settings are commented (including includes \n@target/...\n).\n\n\nAdd the following lines to define the target:\n\n\ntarget_type = 0\nnucleus_p = 6\nnucleus_n = 6\n\n\n\n\n\n\n\nPredefined targets\n\n\nInstead of defining target by hand it is possible to use predefined targets\nfrom \nnuwro/data/target/\n folder. In this case simply add:\n\n\n@target/C.txt\n\n\n\n\n\n\n\n3. Setting dynamics\n\u00b6\n\n\nLocate the following lines:\n\n\ndyn_qel_cc = 1  // Quasi elastic charged current\ndyn_qel_nc = 0  // Quasi elastic neutral current\ndyn_res_cc = 0  // Resonant charged current \ndyn_res_nc = 0  // Resonant neutral current\ndyn_dis_cc = 0  // Deep inelastic charged current \ndyn_dis_nc = 0  // Deep inelastic neutral current \ndyn_coh_cc = 0  // Coherent charged current\ndyn_coh_nc = 0  // Coherent neutral current\ndyn_mec_cc = 0  // Meson exchange charged current\ndyn_mec_nc = 0  // Meson exchange neutral current\n\n\n\n\n\nand modify according to your needs. In this case disable all dynamics but CCQE.\n\n\n4. Running simulation\n\u00b6\n\n\nIf the \nccqe_carbon.txt\n settings file is ready simply run:\n\n\nnuwro -i ccqe_carbon.txt -o ccqe_carbon.root\n\n\n\n\n\nComparing nucleus models\n\u00b6\n\n\nWe want to compare three nucleus models implemented in NuWro:\n\n\n\n\n(global) Fermi gas (with fixed Fermi level)\n\n\nlocal Fermi gas (with Fermi level dependent on density)\n\n\nspectral function\n\n\n\n\nLets consider the NuMi neutrino beam and CH target for all CC channels.\nWe need to perform three simulation, but they all may share the base settings file:\n\n\ncp /path/to/nuwro/data/params.txt numi_cc_ch.txt\n\n\n\n\n\n1. Setting beam and target\n\u00b6\n\n\nMake sure that all other beam and target settings\n(\"Beam specification\" and \"Target specification\") are commented.\nThen add the following lines to \nnumi_cc_ch.txt\n:\n\n\n@beam/NuMi_nu_100_10000.txt  # predefined beam from nuwro/data/beam/\n\ntarget_type = 1              # composed target\ntarget_content = 6 6 1x      # 1 x Carbon\ntarget_content += 1 0 1x     # 1 x Hydrogen\n\n\n\n\n\n2. Setting dynamics\n\u00b6\n\n\nLocate the following lines:\n\n\ndyn_qel_cc = 1  // Quasi elastic charged current\ndyn_qel_nc = 0  // Quasi elastic neutral current\ndyn_res_cc = 1  // Resonant charged current \ndyn_res_nc = 0  // Resonant neutral current\ndyn_dis_cc = 1  // Deep inelastic charged current \ndyn_dis_nc = 0  // Deep inelastic neutral current \ndyn_coh_cc = 1  // Coherent charged current\ndyn_coh_nc = 0  // Coherent neutral current\ndyn_mec_cc = 1  // Meson exchange charged current\ndyn_mec_nc = 0  // Meson exchange neutral current\n\n\n\n\n\nand modify according to your needs. In this case turn on only CC interactions.\n\n\n3. Running simulations\n\u00b6\n\n\nAs we are going to change only nucleus model we may use the same base settings\nfile for all three simulations.\n\n\nFor (global) Fermi gas you have to set \nnucleus_target = 1\n\nand you may want to make sure that spectral function is disabled (\nsf_method\n):\n\n\nnuwro -i numi_cc_ch.txt \\\n      -p \"nucleus_target = 1\" \\\n      -p \"sf_method = 0\" \\\n      -o numi_cc_ch_gfg.root\n\n\n\n\n\nIn the similar way you can perform the simulation for local Fermi gas:\n\n\nnuwro -i numi_cc_ch.txt \\\n      -p \"nucleus_target = 2\" \\\n      -p \"sf_method = 0\" \\\n      -o numi_cc_ch_lfg.root\n\n\n\n\n\nand for spectral function:\n\n\nnuwro -i numi_cc_ch.txt \\\n      -p \"nucleus_target = 2\" \\\n      -p \"sf_method = 1\" \\\n      -o numi_cc_ch_sf.root\n\n\n\n\n\n\n\nSpectral function is applied only for (quasi-)elastic dynamics.\nFor others the model set by \nnucleus_target\n is used.",
            "title": "Running NuWro"
        },
        {
            "location": "/getting-started/running/#basics",
            "text": "After a successful installation you will find  nuwro  executable in  nuwro/bin \nfolder.    Hint  You can run NuWro providing the path to  nuwro \nor you can add  nuwro/bin  to  $PATH  by adding the following line\nto your  ~/.bashrc :  export PATH=(path to nuwro)/bin:$PATH   NuWro does not require any command line arguments, although there are several\noptional arguments:   -o  to provide the path for output files  -i  to provide the path to an input file with simulation settings  -p  to change a single simulation parameter w.r.t to the input file\n(this one can be use multiple times)   In general, the command to run NuWro would look like this:  nuwro [-o output root file] \\\n      [-i input parameters file] \\\n      [-p \"parameter name 1 = value 1\"] \\\n      [-p \"parameter name 2 = value 2\"] \\\n      ...\n      [-p \"parameter name N = value N\"]   When running RES and DIS channel you will see many PYTHIA warnings about\ncatching an infinite loop - just ignore them.",
            "title": "Basics"
        },
        {
            "location": "/getting-started/running/#input",
            "text": "The path to a simulation settings file can be provided with  -i  option.   Note  If the path to a simulation settings file is not provided:   $PWD/params.txt  will be used or  nuwro/data/params.txt  will be used or  hard-coded default settings will be used.    The example settings file can be found in  nuwro/data/params.txt . \nIt is recommended to copy this file to the working directory\nand modify as needed.  The list of available settings can be found in  parameters section .   Example  Copy default settings files to your working directory:  cp /path/to/nuwro/data/params.txt .  modify as needed and run NuWro:  nuwro  Note: If  nuwro/bin  is not in  $PATH  you need to provide the full path.    Example  Copy default settings files:  cp /path/to/nuwro/data/params.txt /some/path/my_params.txt  modify as needed and run NuWro providing the path to  my_params.txt :  nuwro -i /some/path/my_params.txt   Parameters from a settings file can be modified using  -p  option.\nIt is useful if you need to perform several simulations with only small changes\nto settings.   Example  Let  /some/path/my_params.txt  be you base configuration.\nThe following bash script:  1\n2\n3\n4\n5\n6\n7 #!/bin/sh  for  Ma in  $( seq  1000   100   1300 )  do \n    nuwro -i /some/path/my_params.txt  \\ \n          -o my_output_ $Ma .root  \\ \n          -p  \"qel_cc_axial_mass =  $Ma \"  done    will perform 4 simulations with the same settings but axial mass.",
            "title": "Input"
        },
        {
            "location": "/getting-started/running/#output",
            "text": "NuWro produces three output files:   $PWD/eventsout.root  with an events tree  $PWD/eventsout.root.txt  with flux-integrated cross sections  $PWD/eventsout.root.par  with parameters used for the simulation   The output path can be changed with  -o  option.   Example  The following command:  nuwro -o /path/to/simulation.root  will produce the following output files:   /path/to/simulation.root  /path/to/simulation.root.txt  /path/to/simulation.root.par    The instruction on how to work with NuWro output files can be found  here .",
            "title": "Output"
        },
        {
            "location": "/getting-started/running/#examples",
            "text": "The list of all available settings\n(as well as instruction on how to define beam and target)\ncan be found in  parameters section .  This section is just to demonstrate basic usage.",
            "title": "Examples"
        },
        {
            "location": "/getting-started/running/#ccqe-on-carbon",
            "text": "We want to perform the following simulation:   muon neutrino  mono-energetic beam 1 GeV  target = Carbon  only CCQE dynamics   Lets start with grabbing the default settings file,\nwhich we are going to modify for our needs:  cp /path/to/nuwro/data/params.txt ccqe_carbon.txt",
            "title": "CCQE on Carbon"
        },
        {
            "location": "/getting-started/running/#1-setting-the-beam",
            "text": "Locate \"Beam specification\" section and make sure\nthat all beam related settings are commented (including includes  @beam/... ).  Add the following lines to define the beam:  beam_type = 0\nbeam_particle = 14\nbeam_energy = 1000",
            "title": "1. Setting the beam"
        },
        {
            "location": "/getting-started/running/#2-setting-the-target",
            "text": "Locate \"Target specification\" section and make sure\nthat all target related settings are commented (including includes  @target/... ).  Add the following lines to define the target:  target_type = 0\nnucleus_p = 6\nnucleus_n = 6   Predefined targets  Instead of defining target by hand it is possible to use predefined targets\nfrom  nuwro/data/target/  folder. In this case simply add:  @target/C.txt",
            "title": "2. Setting the target"
        },
        {
            "location": "/getting-started/running/#3-setting-dynamics",
            "text": "Locate the following lines:  dyn_qel_cc = 1  // Quasi elastic charged current\ndyn_qel_nc = 0  // Quasi elastic neutral current\ndyn_res_cc = 0  // Resonant charged current \ndyn_res_nc = 0  // Resonant neutral current\ndyn_dis_cc = 0  // Deep inelastic charged current \ndyn_dis_nc = 0  // Deep inelastic neutral current \ndyn_coh_cc = 0  // Coherent charged current\ndyn_coh_nc = 0  // Coherent neutral current\ndyn_mec_cc = 0  // Meson exchange charged current\ndyn_mec_nc = 0  // Meson exchange neutral current  and modify according to your needs. In this case disable all dynamics but CCQE.",
            "title": "3. Setting dynamics"
        },
        {
            "location": "/getting-started/running/#4-running-simulation",
            "text": "If the  ccqe_carbon.txt  settings file is ready simply run:  nuwro -i ccqe_carbon.txt -o ccqe_carbon.root",
            "title": "4. Running simulation"
        },
        {
            "location": "/getting-started/running/#comparing-nucleus-models",
            "text": "We want to compare three nucleus models implemented in NuWro:   (global) Fermi gas (with fixed Fermi level)  local Fermi gas (with Fermi level dependent on density)  spectral function   Lets consider the NuMi neutrino beam and CH target for all CC channels.\nWe need to perform three simulation, but they all may share the base settings file:  cp /path/to/nuwro/data/params.txt numi_cc_ch.txt",
            "title": "Comparing nucleus models"
        },
        {
            "location": "/getting-started/running/#1-setting-beam-and-target",
            "text": "Make sure that all other beam and target settings\n(\"Beam specification\" and \"Target specification\") are commented.\nThen add the following lines to  numi_cc_ch.txt :  @beam/NuMi_nu_100_10000.txt  # predefined beam from nuwro/data/beam/\n\ntarget_type = 1              # composed target\ntarget_content = 6 6 1x      # 1 x Carbon\ntarget_content += 1 0 1x     # 1 x Hydrogen",
            "title": "1. Setting beam and target"
        },
        {
            "location": "/getting-started/running/#2-setting-dynamics",
            "text": "Locate the following lines:  dyn_qel_cc = 1  // Quasi elastic charged current\ndyn_qel_nc = 0  // Quasi elastic neutral current\ndyn_res_cc = 1  // Resonant charged current \ndyn_res_nc = 0  // Resonant neutral current\ndyn_dis_cc = 1  // Deep inelastic charged current \ndyn_dis_nc = 0  // Deep inelastic neutral current \ndyn_coh_cc = 1  // Coherent charged current\ndyn_coh_nc = 0  // Coherent neutral current\ndyn_mec_cc = 1  // Meson exchange charged current\ndyn_mec_nc = 0  // Meson exchange neutral current  and modify according to your needs. In this case turn on only CC interactions.",
            "title": "2. Setting dynamics"
        },
        {
            "location": "/getting-started/running/#3-running-simulations",
            "text": "As we are going to change only nucleus model we may use the same base settings\nfile for all three simulations.  For (global) Fermi gas you have to set  nucleus_target = 1 \nand you may want to make sure that spectral function is disabled ( sf_method ):  nuwro -i numi_cc_ch.txt \\\n      -p \"nucleus_target = 1\" \\\n      -p \"sf_method = 0\" \\\n      -o numi_cc_ch_gfg.root  In the similar way you can perform the simulation for local Fermi gas:  nuwro -i numi_cc_ch.txt \\\n      -p \"nucleus_target = 2\" \\\n      -p \"sf_method = 0\" \\\n      -o numi_cc_ch_lfg.root  and for spectral function:  nuwro -i numi_cc_ch.txt \\\n      -p \"nucleus_target = 2\" \\\n      -p \"sf_method = 1\" \\\n      -o numi_cc_ch_sf.root   Spectral function is applied only for (quasi-)elastic dynamics.\nFor others the model set by  nucleus_target  is used.",
            "title": "3. Running simulations"
        },
        {
            "location": "/getting-started/parameters/",
            "text": "NuWro uses by default settings from the \nparams.txt\n file located in \n$PWD\n directory.\nIf the file does not exist, the one from \nnuwro/data\n folder is loaded.\nIf both files are missing or some of the parameters are not set in the file,\ndefault values are used. \n\n\nGeneral settings\n\u00b6\n\n\n\n\n\n\n\n\nParameter name\n\n\nPossible arguments\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber_of_events\n\n\npositive integer\n\n\n1e5\n\n\nThe number of equally weighted events to be saved in the output ROOT file\n\n\n\n\n\n\nnumber_of_test_events\n\n\npositive integer\n\n\n1e6\n\n\nThe number of events used to calculate cross sections (not saved by default)\n\n\n\n\n\n\nuser_events\n\n\n0, 1\n\n\n0\n\n\nUsed to turn on the fitting procedure:\n0 - Run NuWro\n1 - Fit axial mass to MiniBooNE data for CCQE\n\n\n\n\n\n\nuser_params \n \n(for user_events 1)\n\n\nx y z\n\n\n-\n\n\nParameters for the axial mass extraction procedure:\nx - the minimum axial mass value\ny - the maximum axial mass value\nz - the axial mass step\n\n\n\n\n\n\nrandom_seed\n\n\npositive integer\n\n\n0\n\n\nControls the random seed persistence:\n0 - use time(NULL) as a seed for the random number generator\n1 - read state from \u201crandom seed\u201d file or use seed=time(NULL), if the file was not found\nn - use n as the seed for the random number generator\n\n\n\n\n\n\nmixed_order\n\n\n0, 1\n\n\n0\n\n\nIf 1, events are saved to the output file in random order\n\n\n\n\n\n\nsave_test_events\n\n\n0-2\n\n\n0\n\n\nTurn on to use test events in the analysis:\n0 - test events are not saved\n1 - test events are finalized and stored in weight.eventsout.root file, the average weight is equal to the total cross section\n2 - test events of nonzero weights are finalized and stored in weight.eventsout.root file, the weights are respectively scaled, so the average weight is equal to the total cross section\n\n\n\n\n\n\n\n\nBeam settings\n\u00b6\n\n\n\n\n\n\n\n\nParameter name\n\n\nPossible arguments\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbeam_direction\n\n\nx y z\n\n\n0 0 1\n\n\nThe direction of the neutrino momentum in xyz coordinates\n\n\n\n\n\n\nbeam_type\n\n\n0-4\n\n\n0\n\n\nTypes of beams:\n 0 - a single neutrino flavor beam\n1 - a mixed flavor beam\n2 - a beam loaded from a ROOT file\n3 - a beam loaded from the histogram (histout.txt)\n4 - create histout.txt file based on a ROOT file (than use beam type 3 to run NuWro)\n\n\n\n\n\n\nbeam_particle\n(for beam_type 0)\n\n\n+/- 12, 14, 16\n\n\n14\n\n\nPDG number of the incident neutrino\n\n\n\n\n\n\nbeam_energy\n(for beam_type 0)\n\n\nexplained below\n\n\n1000\n\n\nThe energy profile\n\n\n\n\n\n\nbeam_content\n(for beam_type 1)\n\n\nexplained below\n\n\n-\n\n\nThe mixed beam definition\n\n\n\n\n\n\nbeam_folder\n(for beam_type 2, 4)\n\n\npath\n\n\n../flux\n\n\nThe path to the directory with ROOT files\n\n\n\n\n\n\nbeam_file_first\n(for beam_type 2, 4)\n\n\npositive integer\n\n\n1\n\n\nThe number of the first file in the folder to be read\n\n\n\n\n\n\nbeam_file_limit\n(for beam_type 2, 4)\n\n\npositive integer\n\n\n0\n\n\nThe number of files to be loaded (0 - read files to the last one in the directory)\n\n\n\n\n\n\nbeam_offset\n\n\nx y z\n\n\n0 0 0\n\n\nThe offset of the position of the interaction in xyz coordinates\n\n\n\n\n\n\nbeam_placement\n(in cascade mode only)\n\n\n0-2\n\n\n0\n\n\nThe starting position of the particle:\n0 - the propagation starts at the center of the nucleus\n1 - the propagation starts at a random place inside the nucleus\n2 - the propagation starts just under the surface of the nucleus\n\n\n\n\n\n\n\n\nDefining energy profile for a single flavor beam\n\u00b6\n\n\nFor a single flavor neutrino beam you need to set up \nbeam_type = 0\n\nand specify neutrino PDG using \nbeam_particle = [PDG code]\n.\n\n\nThe energy profile is set using \nbeam_energy\n:\n\n\n\n\n\n\nfor a mono-energetic beam use:\n\n\nbeam_energy = E\n\n\n\n\n\nwhere \nE\n is neutrino energy in MeV\n\n\n\n\n\n\nfor a uniform beam with energy range from \nE0\n to \nE1\n use:\n\n\nbeam_energy = E0 E1\n\n\n\n\n\n\n\n\n\nfor a non-uniform beam with energy range from \nE0\n to \nE1\n given by histogram\n\na1, a2, ..., an\n use:\n\n\nbeam_energy = E0 E1 a0 a1 ... an\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\nThe histogram does not have to be normalized. The probability of finding\nneutrino energy in i-th bin is defined as follows:\n\n\n\\[P_i = \\frac{a_i}{\\sum\\limits_{i=0}^n a_j}\\]\n\n\n\n\nExample\n\n\nThe following code:\n\n\nbeam_energy = 1000 2000 1 2 3 4\n\n\n\n\n\ndefines the following beam:\n\n\n^\n|\n|                       |-----|\n|                       |     |\n|                 |-----|     |\n|                 |     |     |\n|           |-----|     | 40% |\n|           |     | 30% |     |\n|     |-----| 20% |     |     |\n|     | 10% |     |     |     |   \n|-----|-----|-----|-----|-----|-----> E [MeV]   \n    1000  1250  1500  1750  2000\n\n\n\n\n\n\n\nDefining energy profile for a mixed flavor beam\n\u00b6\n\n\nFor a mixed flavor neutrino beam you need to set up \nbeam_type = 1\n.\n\n\nInstead of using \nbeam_particle\n and \nbeam_energy\n you should define a beam\nwith:\n\n\nbeam_content\n \n=\n \n[\nPDG\n \ncode\n]\n \n[\nfraction\n]\n%\n \n[\nbeam\n \nenergy\n]\n\n\n\n\n\n\nwhere \n[beam energy]\n is defined as for a single flavor beam.\n\n\n\n\nExample\n\n\nThe following code:\n\n\nbeam_content = 14 80% 1000\n\n\n\n\n\ndefines mono-energetic muon neutrino beam,\nwhich constitutes 80% of the whole flux.\n\n\n\n\nYou may add as many beam contents as you want in the following way:\n\n\nbeam_content\n \n+=\n \n[\nPDG\n \ncode\n]\n \n[\nfraction\n]\n%\n \n[\nbeam\n \nenergy\n]\n\n\n\n\n\n\n\n\nPlease note \n+=\n. Using \n=\n would clear the previous content.\n\n\n\n\nIn general, a mixed flavor beam definition would look like this:\n\n\nbeam_content = [PDG code 1] [fraction 1]% [beam energy 1]\nbeam_content += [PDG code 2] [fraction 2]% [beam energy 2]\nbeam_content += [PDG code 3] [fraction 3]% [beam energy 3]\n...\n\n\n\n\n\n\n\nExample\n\n\nThe following code:\n\n\nbeam content = 12 75% 1000\nbeam content += -12 20% 1000 2000\nbeam content += 14 5% 1000 1500 1 5 10 15 5 1\n\n\n\n\n\ndefines the following beam:\n\n\n\n\n75% of mono-energetic electron neutrinos\n\n\n20% of electron anti-neutrinos with uniformly distributed energy\n\n\n5% of muon neutrinos with some energy distribution in range 1-1.5 GeV\n\n\n\n\n\n\nPredefined beams\n\u00b6\n\n\nOne can also use predefined beam specifications instead of the above parameters.\nThe list of beams can be found in \nnuwro/data/beam\n directory.\nTo use one of those beams, one must use the following line:\n\n\n@beam/beamfile.txt\n\n\n\n\n\nwhere \nbeamfile.txt\n is the name of the file from \nnuwro/data/beam\n directory.\n\n\nTarget settings\n\u00b6\n\n\n\n\n\n\n\n\nParameter name\n\n\nPossible arguments\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget_type\n\n\n0-2\n\n\n0\n\n\nTypes of targets:\n0 - a single nucleus\n1 - a target composed from\n\n\n\n\n\n\nsome nuclei\n2 - a detector geometry loaded from a ROOT file\n\n\n\n\n\n\n\n\n\n\n\n\nnucleus_p\n(for target_type 0)\n\n\npositive integer\n\n\n6\n\n\nThe number of protons in a target nucleus\n\n\n\n\n\n\nnucleus_n\n(for target_type 0)\n\n\npositive integer\n\n\n6\n\n\nThe number of neutrons in a target nucleus\n\n\n\n\n\n\nnucleus_E_b\n(for target_type 0)\n\n\npositive integer\n\n\n34\n\n\nThe binding potential (sum of binding and Fermi energies)\n\n\n\n\n\n\nnucleus_kf\n(for target_type 0)\n\n\npositive integer\n\n\n220\n\n\nThe Fermi momentum\n\n\n\n\n\n\nnucleus_target\n\n\n0-5\n\n\n2\n\n\nNucleus models used in a primary interaction:\n0 - free nucleon\n1 - Fermi gas\n2 - local Fermi gas\n 3 - Bodek-Ritchie model\n4 - spectral function\n5 - deuterium\n\n\n\n\n\n\nnucleus_model\n\n\n0, 1\n\n\n1\n\n\nNucleus density profiles for FSI:\n0 - constant density\n1 - realistic density profile\n\n\n\n\n\n\ntarget_content\n(for target_type 1)\n\n\nexplained below\n\n\n-\n\n\nThe composed target definition\n\n\n\n\n\n\ngeo_file\n(for target_type 2)\n\n\nfilename\n\n\ntarget/ND280v9r7p5.root\n\n\nThe path to the file with the detector geometry\n\n\n\n\n\n\ngeo_name\n(for target_type 2)\n\n\ngeometry name\n\n\nND280Geometry v9r7p5\n\n\nThe name of the geometry in the file\n\n\n\n\n\n\ngeo_o\n(for target_type 2)\n\n\nx y z\n\n\n0 0 0\n\n\nThe coordinates of the center of the box\n\n\n\n\n\n\ngeo_d\n(for target_type 2)\n\n\nx y z\n\n\n2000 5000 2000\n\n\nThe half dimension of the box\n\n\n\n\n\n\ngeo_volumne\n(for target_type 2)\n\n\nmaster volume name\n\n\n-\n\n\nThe name of the \nmaster volume\n in the detector file\n\n\n\n\n\n\n\n\nDefining a single nucleus target\n\u00b6\n\n\nIn order to define a single nucleus target you need to set up \ntarget_type = 0\n.\nThen, define the number of nucleons using:\n\n\nnucleus_p = [#protons]\nnucleus_n = [#neutrons]\n\n\n\n\n\nYou may set up other nucleus properties using parameters listed in the table above.\n\n\n\n\nExample\n\n\nTo define Carbon target use:\n\n\ntarget_type = 0\nnucleus_p = 6\nnucleus_n = 6\n\n\n\n\n\n\n\nDefining a composed target\n\u00b6\n\n\nIn order to define a multi-nuclei target you need to set up \ntarget_type = 1\n.\n\n\nInstead of using \nnucleus_p\n, \nnucleus_n\n and other nucleus related parameters\nyou should define your target with:\n\n\ntarget_content\n \n=\n \n[\n#\nprotons\n]\n \n[\n#\nneutrons\n]\n \n[\n#\nnuclei\n]\nx\n \n[\nbinding\n \nenergy\n]\n \n[\nFermi\n \nmomentum\n]\n \n[\nnucleus\n \nmodel\n]\n\n\n\n\n\n\nwhere only first three arguments are required.\n\n\n\n\nWhen using local Fermi gas model binding energy and Fermi momentum\nare taken from tables anyway.\n\n\n\n\nYou may add as many nuclei as you want in the following way:\n\n\ntarget_content\n \n+=\n \n[\n#\nprotons\n]\n \n[\n#\nneutrons\n]\n \n[\n#\nnuclei\n]\nx\n \n[\nbinding\n \nenergy\n]\n \n[\nFermi\n \nmomentum\n]\n \n[\nnucleus\n \nmodel\n]\n\n\n\n\n\n\n\n\nPlease note \n+=\n. Using \n=\n would clear the previous content.\n\n\n\n\nIn general, a multi-nuclei target definition would look like this:\n\n\ntarget_content = [#protons 1] [#neutrons 1] [#nuclei 1]x\ntarget_content += [#protons 2] [#neutrons 2] [#nuclei 2]x\ntarget_content += [#protons 3] [#neutrons 3] [#nuclei 3]x\n\n\n\n\n\n\n\nExample\n\n\nTo define \n\\(C_2H_6O\\)\n use the following code:\n\n\ntarget_type = 1\ntarget content = 6 6 2x\ntarget content += 1 0 6x\ntarget content += 8 8 1x\n\n\n\n\n\n\n\nPredefined targets\n\u00b6\n\n\nOne can also use predefined target specifications instead of the above parameters.\nThe list of targets can be found in \nnuwro/data/target\n directory.\nTo use one of those beams, one must use the following line:\n\n\n@target/targetfile.txt\n\n\n\n\n\nwhere \ntargetfile.txt\n is the name of the file from \nnuwro/data/target\n directory.\n\n\nInteractions settings\n\u00b6\n\n\n\n\n\n\n\n\nParameter name\n\n\nPossible arguments\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndyn_qel_cc\n\n\n0, 1\n\n\n1\n\n\nTurn on/off charge current quasielastic process\n\n\n\n\n\n\ndyn_qel_nc\n\n\n0, 1\n\n\n1\n\n\nTurn on/off neutral current quasielastic process\n\n\n\n\n\n\ndyn_res_cc\n\n\n0, 1\n\n\n1\n\n\nTurn on/off charge current resonance pion production\n\n\n\n\n\n\ndyn_res_nc\n\n\n0, 1\n\n\n1\n\n\nTurn on/off neutral current resonance pion production\n\n\n\n\n\n\ndyn_dis_cc\n\n\n0, 1\n\n\n1\n\n\nTurn on/off charge current deep inelastic scattering\n\n\n\n\n\n\ndyn_dis_nc\n\n\n0, 1\n\n\n1\n\n\nTurn on/off neutral current deep inelastic scattering\n\n\n\n\n\n\ndyn_coh_cc\n\n\n0, 1\n\n\n1\n\n\nTurn on/off charge current coherent pion production\n\n\n\n\n\n\ndyn_coh_nc\n\n\n0, 1\n\n\n1\n\n\nTurn on/off neutral current coherent pion production\n\n\n\n\n\n\ndyn_mec_cc\n\n\n0, 1\n\n\n1\n\n\nTurn on/off charge current meson exchange current process\n\n\n\n\n\n\ndyn_mec_nc\n\n\n0, 1\n\n\n1\n\n\nTurn on/off neutral current meson exchange current process\n\n\n\n\n\n\n\n\nQuasi-elastic\n\u00b6\n\n\n\n\n\n\n\n\nParameter name\n\n\nPossible arguments\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nqel_vector_ff_set\n\n\n1-6\n\n\n2\n\n\nElectromagnetic form factors parametrization:\n1 - dipole form\n2 - BBBA05 (Ref. [1])\n3 - BBA03 (Ref. [2])\n4 - JLab (Ref. [3])\n5 - NN10 with two photon exchange effect (Ref. [4])\n\n\n\n\n\n\nqel_axial_ff_set\n\n\n1-4\n\n\n1\n\n\nAxial form factors parametrization:\n1 - dipole form\n2 - 2-fold parabolic modification\n3 - 3-fold parabolic modification\n4 - 4-fold parabolic modification\n\n\n\n\n\n\nqel_strange\n\n\n0, 1\n\n\n0\n\n\nTurn on/off the strange quark contribution to the NC axial form factors\n\n\n\n\n\n\nqel_strangeEM\n\n\n0, 1\n\n\n0\n\n\nTurn on/off the strange quark contribution to the NC vector form factors\n\n\n\n\n\n\ndelta_s\n\n\nany number\n\n\n-0.15\n\n\nStrangeness contribution\n\n\n\n\n\n\nqel_cc_axial_mass\n\n\npositive number\n\n\n1200\n\n\nThe axial mass value for charge current form factors\n\n\n\n\n\n\nqel_nc_axial_mass\n\n\npositive number\n\n\n1350\n\n\nThe axial mass value for neutral current form factors\n\n\n\n\n\n\nqel_s_axial_mass\n\n\npositive number\n\n\n1200\n\n\nThe axial mass value used in the dipole strange form factor\n\n\n\n\n\n\nqel_rpa\n\n\n0-3\n\n\n0\n\n\nRPA settings:\n0 - do not use RPA\n1 - use RPA without effective mass of nucleon\n2 - use effective mass of nucleon without RPA (test only)\n 3 - use RPA with effective mass of nucleon (test only)\n\n\n\n\n\n\nflux_correction\n\n\n0, 1\n\n\n1\n\n\nTurn on/off flux correction\n\n\n\n\n\n\nsf_method\n\n\n0-3\n\n\n0\n\n\nSpectral function settings (for CCQE):\n0 - do not use spectral function\n1 - use grid spectral function (for 12C, 16O, 40Ar, 40Ca, 56Fe)\n2 - use factorized spectral function (for 16O, 40Ar, 40Ca)\n\n\n\n\n\n\ncc_smoothing\n\n\n0, 1\n\n\n1\n\n\nIf 1, the impossible quasi-elastic reaction (like CC nu scattering off proton) are skipped\n\n\n\n\n\n\n\n\nPion production\n\u00b6\n\n\n\n\n\n\n\n\nParameter name\n\n\nPossible arguments\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndelta_FF_set\n\n\n1-7\n\n\n1\n\n\nDelta production form factors:\n1 - dipole form [5]\n2 - Paschos and Lalakulich, 2.12 MA = 1.05GeV BNL fit (Ref. [6])\n3 - Paschos and Lalakulich, 2.12 MA = 0.84GeV ANL fit (Ref. [6])\n4 - Paschos and Lalakulich, page 4, bottom right (Ref. [6])\n5 - Paschos and Lalakulich, page 5, top left (Ref. [6])\n6 - Eq. 13 from Ref. [7]\n7 - based on chiral quark model from Ref. [8]\n\n\n\n\n\n\npion_axial_mass\n(for delta_FF_set 1)\n\n\npositive number\n\n\n0.94\n\n\nThe axial mass value used in dipole parametrization of the resonance pion production form factor\n\n\n\n\n\n\npion_C5A\n(for delta_FF_set 1)\n\n\npositive number\n\n\n1.19\n\n\nThe C5A value used in dipole parametrization of the resonance pion production form factor\n\n\n\n\n\n\nspp_precision\n\n\npositive number\n\n\n500\n\n\nControls the precision in RESDIS boundary region; should not be changed\n\n\n\n\n\n\nred_dis_cut\n\n\npositive number\n\n\n1600\n\n\nBoundary of RES-DIS transition; should not be changed\n\n\n\n\n\n\ncoh_mass_correction\n\n\n0, 1\n\n\n1\n\n\nTurn on/off Rein Sehgal correction to charge current coherent pion production\n\n\n\n\n\n\ncoh_new\n\n\n0, 1\n\n\n1\n\n\nChange between old (0) and improved (1) implementation of coherent pion production\n\n\n\n\n\n\n\n\nTwo-body current\n\u00b6\n\n\n\n\n\n\n\n\nParameter name\n\n\nPossible arguments\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmec_kind\n\n\n1-4\n\n\n1\n\n\nTwo-body current models:\n1 - Transverse Enhancement model (Ref. [9])\n2 - based on Marteau model (Ref. [10, 12])\n3 - Nieves et al. model (Ref. [11])\n\n\n\n\n\n\nmec_ratio_pp\n\n\n[0,1]\n\n\n0.6\n\n\nThe fraction of mixed initial nucleon pairs for charge current interaction. For neutral current the fraction is calculated as 1/(2*mec ratio pp + 1)\n\n\n\n\n\n\n\n\nFinal state interactions\n\u00b6\n\n\n\n\n\n\n\n\nParameter name\n\n\nPossible arguments\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkaskada_on\n\n\n0, 1\n\n\n1\n\n\nTurn on (1) / off (0) final state interactions\n\n\n\n\n\n\nkaskada_w\n\n\npositive number\n\n\n7\n\n\nThe value of the effective potential subtracted from the nucleons energy leaving the nucleus\n\n\n\n\n\n\nkaskada_redo\n\n\n0, 1\n\n\n0\n\n\nIf on, given output file (\neventsout.root\n by default) is loaded, the primary vertex is copied and only final state interactions are simulated. New output file with \n.fsi.root\n suffix is created\n\n\n\n\n\n\nkaskada_writeall\n\n\n0, 1\n\n\n0\n\n\nIf on, all particles created during final state interactions are saved in \nall\n vector\n\n\n\n\n\n\nstep\n\n\npositive number\n\n\n0.2\n\n\nLength of max step in the cascade in fm\n\n\n\n\n\n\nxsec\n\n\n0, 1\n\n\n1\n\n\nCross section models for pion-nucleon interactions:\n 0 - based on Ref. [13]\n1 - based on Ref. [14]\n\n\n\n\n\n\npauli_blocking\n\n\n0, 1\n\n\n1\n\n\nTurn on/off Pauli blocking\n\n\n\n\n\n\nformation_length\n(for formation_zone const)\n\n\npositive number\n\n\n1\n\n\nFormation length in fm\n\n\n\n\n\n\ntau\n\n\npositive number\n\n\n8\n\n\nThe parameter control the formation length for \nranft\n and \nrl\n models\n\n\n\n\n\n\nfirst_step\n\n\n0, 1\n\n\n0\n\n\nIf off, the formation zone is applied only for the particles created during final state interactions\n\n\n\n\n\n\nformation_zone\n\n\nexplained below\n\n\nfz\n\n\nexplained below\n\n\n\n\n\n\n\n\nFormation zone models\n\u00b6\n\n\n\n\nnofz\n: formation zone is off\n\n\nskat8\n: SKAT parametrization (Ref. [15])\n\n\ncosyn\n: parametrization based on Color Transparency measurements (Ref. [16])\n\n\ncohl\n: coherence length (Ref. [17])\n\n\nranft\n: parametrization based on hadron-hadron and hadron-nucleus collision (Ref. [18])\n\n\nrl\n: as \nranft\n but with fixed transverse momentum equal zero\n\n\ndelta\n: for resonance pion production; based on \u2206 lifetime (Ref. [19])\n\n\nconst\n: constant value (defined by \nformation_length\n)\n\n\nfz\n (default):\n\n\ncohl\n for quasi-elastic scattering\n\n\ndelta\n for resonance pion production\n\n\nranft\n for deep inelastic scattering\n\n\nnofz\n for meson exchange current\n\n\n\n\n\n\ntrans\n: only for nuclear transparency analysis\n\n\n\n\nReferences\n\u00b6\n\n\n[1] R. Bradford et al. \u201cA New parameterization of the nucleon elastic form-factors\u201d. Nucl.Phys.Proc.Suppl.\n159 (2006), pp. 127\u2013132.\n\n\n[2] Howard Scott Budd, A. Bodek, and J. Arrington. \u201cModeling quasielastic form-factors for\nelectron and neutrino scattering\u201d . arXiv: hep-ex/0308005 (2003).\n\n\n[3] E.J. Brash et al. \u201cNew empirical fits to the proton electromagnetic form-factors\u201d. Phys.Rev.\nC65 (2002), p. 051001.\n\n\n[4] Krzysztof M. Graczyk, Piotr Plonski, and Robert Sulej. \u201cNeural Network Parameterizations\nof Electromagnetic Nucleon Form Factors\u201d. JHEP. 1009 (2010), p. 053.\n\n\n[5] K.M. Graczyk, D. Kielczewska, P. Przewlocki, and J.T. Sobczyk. \"C(5)**A axial form factor from bubble chamber experiments\". Phys.Rev. D80 (2009) 093001\n\n\n[6] Olga Lalakulich and Emmanuel A. Paschos. \u201cResonance production by neutrinos. I. J = 3/2\nresonances\u201d. Phys.Rev. D71 (2005), p. 074003.\n\n\n[7] L. Alvarez-Ruso, S. K. Singh, and M. J. Vicente Vacas. \u201cCharged current weak electroproduction\nof the \u2206 resonance\u201d. Phys. Rev. C. 57 (5 1998), pp. 2693\u20132699.\n\n\n[8] D. Barquilla-Cano, A.J. Buchmann, and E. Hernandez. \u201cAxial N-\u00bfDelta(1232) and N-\u00bfN*(1440)\ntransition form factors\u201d. Phys.Rev. C75 (2007), p. 065203.\n\n\n[9] A. Bodek, H.S. Budd, and M.E. Christy. \u201cNeutrino Quasielastic Scattering on Nuclear Targets:\nParametrizing Transverse Enhancement (Meson Exchange Currents)\u201d. Eur.Phys.J. C71 (2011), p. 1726.\n\n\n[10] Jan T. Sobczyk. \u201cModeling nuclear effects in neutrino interactions in 1-GeV region\u201d . arXiv:\nnucl-th/0307047 (2003).\n\n\n[11] J. Nieves, I. Ruiz Simo, and M. J. Vicente Vacas. \u201cInclusive charged-current neutrino-nucleus\nreactions\u201d. Phys. Rev. C. 83 (4 2011), p. 045501.\n\n\n[12] M. Martini et al. \u201cUnified approach for nucleon knock-out and coherent and incoherent pion\nproduction in neutrino interactions with nuclei\u201d. Phys. Rev. C. 80 (6 2009), p. 065501.\n\n\n[13] N. Metropolis et al. \u201cMonte Carlo Calculations on Intranuclear Cascades. I. Low-Energy\nStudies\u201d. Phys.Rev. 110 (1958), pp. 185\u2013203.\n\n\n[14] L.L. Salcedo et al. \u201cComputer simulation of inclusive pion nuclear reactions\u201d. Nucl.Phys.\nA484 (1988), p. 557.\n\n\n[15] D.S. Baranov et al. \u201cAn estimate for the formation length of hadrons in neutrino interactions\u201d\n(1984).\n\n\n[16] Wim Cosyn. \u201cExploring the limits of a hadronic picture of nuclei through pion and nucleon\nremoval reactions\u201d. PhD thesis. Ghent University, 2009. url: http://lib.ugent.be/fulltxt/RUG01/001/350/817/RUG01-001350817/_2010/_0001/_AC.pdf1\n\n\n[17] A. Rubbia G. Battistoni A. Ferrari and P.R. Sala. The FLUKA nuclear cascade model applied\nto neutrino interactions. talk given at NuInt02. 2002.\n\n\n[18] J. Ranft. \u201cHadron production in hadron-nucleus and nucleus-nucleus collisions in a dual\nparton model modified by a formation zone intranuclear cascade\u201d. Zeitschrift f\u00a8ur Physik C\nParticles and Fields. 43.3 (1989), pp. 439\u2013446.\n\n\n[19] Tomasz Golan, Cezary Juszczak, and Jan T. Sobczyk. \u201cFinal State Interactions Effects in\nNeutrino-Nucleus Interactions\u201d. Phys.Rev. C86 (2012), p. 015505.",
            "title": "Parameters list"
        },
        {
            "location": "/getting-started/parameters/#general-settings",
            "text": "Parameter name  Possible arguments  Default value  Description      number_of_events  positive integer  1e5  The number of equally weighted events to be saved in the output ROOT file    number_of_test_events  positive integer  1e6  The number of events used to calculate cross sections (not saved by default)    user_events  0, 1  0  Used to turn on the fitting procedure: 0 - Run NuWro 1 - Fit axial mass to MiniBooNE data for CCQE    user_params    (for user_events 1)  x y z  -  Parameters for the axial mass extraction procedure: x - the minimum axial mass value y - the maximum axial mass value z - the axial mass step    random_seed  positive integer  0  Controls the random seed persistence: 0 - use time(NULL) as a seed for the random number generator 1 - read state from \u201crandom seed\u201d file or use seed=time(NULL), if the file was not found n - use n as the seed for the random number generator    mixed_order  0, 1  0  If 1, events are saved to the output file in random order    save_test_events  0-2  0  Turn on to use test events in the analysis: 0 - test events are not saved 1 - test events are finalized and stored in weight.eventsout.root file, the average weight is equal to the total cross section 2 - test events of nonzero weights are finalized and stored in weight.eventsout.root file, the weights are respectively scaled, so the average weight is equal to the total cross section",
            "title": "General settings"
        },
        {
            "location": "/getting-started/parameters/#beam-settings",
            "text": "Parameter name  Possible arguments  Default value  Description      beam_direction  x y z  0 0 1  The direction of the neutrino momentum in xyz coordinates    beam_type  0-4  0  Types of beams:  0 - a single neutrino flavor beam 1 - a mixed flavor beam 2 - a beam loaded from a ROOT file 3 - a beam loaded from the histogram (histout.txt) 4 - create histout.txt file based on a ROOT file (than use beam type 3 to run NuWro)    beam_particle (for beam_type 0)  +/- 12, 14, 16  14  PDG number of the incident neutrino    beam_energy (for beam_type 0)  explained below  1000  The energy profile    beam_content (for beam_type 1)  explained below  -  The mixed beam definition    beam_folder (for beam_type 2, 4)  path  ../flux  The path to the directory with ROOT files    beam_file_first (for beam_type 2, 4)  positive integer  1  The number of the first file in the folder to be read    beam_file_limit (for beam_type 2, 4)  positive integer  0  The number of files to be loaded (0 - read files to the last one in the directory)    beam_offset  x y z  0 0 0  The offset of the position of the interaction in xyz coordinates    beam_placement (in cascade mode only)  0-2  0  The starting position of the particle: 0 - the propagation starts at the center of the nucleus 1 - the propagation starts at a random place inside the nucleus 2 - the propagation starts just under the surface of the nucleus",
            "title": "Beam settings"
        },
        {
            "location": "/getting-started/parameters/#defining-energy-profile-for-a-single-flavor-beam",
            "text": "For a single flavor neutrino beam you need to set up  beam_type = 0 \nand specify neutrino PDG using  beam_particle = [PDG code] .  The energy profile is set using  beam_energy :    for a mono-energetic beam use:  beam_energy = E  where  E  is neutrino energy in MeV    for a uniform beam with energy range from  E0  to  E1  use:  beam_energy = E0 E1    for a non-uniform beam with energy range from  E0  to  E1  given by histogram a1, a2, ..., an  use:  beam_energy = E0 E1 a0 a1 ... an     Hint  The histogram does not have to be normalized. The probability of finding\nneutrino energy in i-th bin is defined as follows:  \\[P_i = \\frac{a_i}{\\sum\\limits_{i=0}^n a_j}\\]   Example  The following code:  beam_energy = 1000 2000 1 2 3 4  defines the following beam:  ^\n|\n|                       |-----|\n|                       |     |\n|                 |-----|     |\n|                 |     |     |\n|           |-----|     | 40% |\n|           |     | 30% |     |\n|     |-----| 20% |     |     |\n|     | 10% |     |     |     |   \n|-----|-----|-----|-----|-----|-----> E [MeV]   \n    1000  1250  1500  1750  2000",
            "title": "Defining energy profile for a single flavor beam"
        },
        {
            "location": "/getting-started/parameters/#defining-energy-profile-for-a-mixed-flavor-beam",
            "text": "For a mixed flavor neutrino beam you need to set up  beam_type = 1 .  Instead of using  beam_particle  and  beam_energy  you should define a beam\nwith:  beam_content   =   [ PDG   code ]   [ fraction ] %   [ beam   energy ]   where  [beam energy]  is defined as for a single flavor beam.   Example  The following code:  beam_content = 14 80% 1000  defines mono-energetic muon neutrino beam,\nwhich constitutes 80% of the whole flux.   You may add as many beam contents as you want in the following way:  beam_content   +=   [ PDG   code ]   [ fraction ] %   [ beam   energy ]    Please note  += . Using  =  would clear the previous content.   In general, a mixed flavor beam definition would look like this:  beam_content = [PDG code 1] [fraction 1]% [beam energy 1]\nbeam_content += [PDG code 2] [fraction 2]% [beam energy 2]\nbeam_content += [PDG code 3] [fraction 3]% [beam energy 3]\n...   Example  The following code:  beam content = 12 75% 1000\nbeam content += -12 20% 1000 2000\nbeam content += 14 5% 1000 1500 1 5 10 15 5 1  defines the following beam:   75% of mono-energetic electron neutrinos  20% of electron anti-neutrinos with uniformly distributed energy  5% of muon neutrinos with some energy distribution in range 1-1.5 GeV",
            "title": "Defining energy profile for a mixed flavor beam"
        },
        {
            "location": "/getting-started/parameters/#predefined-beams",
            "text": "One can also use predefined beam specifications instead of the above parameters.\nThe list of beams can be found in  nuwro/data/beam  directory.\nTo use one of those beams, one must use the following line:  @beam/beamfile.txt  where  beamfile.txt  is the name of the file from  nuwro/data/beam  directory.",
            "title": "Predefined beams"
        },
        {
            "location": "/getting-started/parameters/#target-settings",
            "text": "Parameter name  Possible arguments  Default value  Description      target_type  0-2  0  Types of targets: 0 - a single nucleus 1 - a target composed from    some nuclei 2 - a detector geometry loaded from a ROOT file       nucleus_p (for target_type 0)  positive integer  6  The number of protons in a target nucleus    nucleus_n (for target_type 0)  positive integer  6  The number of neutrons in a target nucleus    nucleus_E_b (for target_type 0)  positive integer  34  The binding potential (sum of binding and Fermi energies)    nucleus_kf (for target_type 0)  positive integer  220  The Fermi momentum    nucleus_target  0-5  2  Nucleus models used in a primary interaction: 0 - free nucleon 1 - Fermi gas 2 - local Fermi gas  3 - Bodek-Ritchie model 4 - spectral function 5 - deuterium    nucleus_model  0, 1  1  Nucleus density profiles for FSI: 0 - constant density 1 - realistic density profile    target_content (for target_type 1)  explained below  -  The composed target definition    geo_file (for target_type 2)  filename  target/ND280v9r7p5.root  The path to the file with the detector geometry    geo_name (for target_type 2)  geometry name  ND280Geometry v9r7p5  The name of the geometry in the file    geo_o (for target_type 2)  x y z  0 0 0  The coordinates of the center of the box    geo_d (for target_type 2)  x y z  2000 5000 2000  The half dimension of the box    geo_volumne (for target_type 2)  master volume name  -  The name of the  master volume  in the detector file",
            "title": "Target settings"
        },
        {
            "location": "/getting-started/parameters/#defining-a-single-nucleus-target",
            "text": "In order to define a single nucleus target you need to set up  target_type = 0 .\nThen, define the number of nucleons using:  nucleus_p = [#protons]\nnucleus_n = [#neutrons]  You may set up other nucleus properties using parameters listed in the table above.   Example  To define Carbon target use:  target_type = 0\nnucleus_p = 6\nnucleus_n = 6",
            "title": "Defining a single nucleus target"
        },
        {
            "location": "/getting-started/parameters/#defining-a-composed-target",
            "text": "In order to define a multi-nuclei target you need to set up  target_type = 1 .  Instead of using  nucleus_p ,  nucleus_n  and other nucleus related parameters\nyou should define your target with:  target_content   =   [ # protons ]   [ # neutrons ]   [ # nuclei ] x   [ binding   energy ]   [ Fermi   momentum ]   [ nucleus   model ]   where only first three arguments are required.   When using local Fermi gas model binding energy and Fermi momentum\nare taken from tables anyway.   You may add as many nuclei as you want in the following way:  target_content   +=   [ # protons ]   [ # neutrons ]   [ # nuclei ] x   [ binding   energy ]   [ Fermi   momentum ]   [ nucleus   model ]    Please note  += . Using  =  would clear the previous content.   In general, a multi-nuclei target definition would look like this:  target_content = [#protons 1] [#neutrons 1] [#nuclei 1]x\ntarget_content += [#protons 2] [#neutrons 2] [#nuclei 2]x\ntarget_content += [#protons 3] [#neutrons 3] [#nuclei 3]x   Example  To define  \\(C_2H_6O\\)  use the following code:  target_type = 1\ntarget content = 6 6 2x\ntarget content += 1 0 6x\ntarget content += 8 8 1x",
            "title": "Defining a composed target"
        },
        {
            "location": "/getting-started/parameters/#predefined-targets",
            "text": "One can also use predefined target specifications instead of the above parameters.\nThe list of targets can be found in  nuwro/data/target  directory.\nTo use one of those beams, one must use the following line:  @target/targetfile.txt  where  targetfile.txt  is the name of the file from  nuwro/data/target  directory.",
            "title": "Predefined targets"
        },
        {
            "location": "/getting-started/parameters/#interactions-settings",
            "text": "Parameter name  Possible arguments  Default value  Description      dyn_qel_cc  0, 1  1  Turn on/off charge current quasielastic process    dyn_qel_nc  0, 1  1  Turn on/off neutral current quasielastic process    dyn_res_cc  0, 1  1  Turn on/off charge current resonance pion production    dyn_res_nc  0, 1  1  Turn on/off neutral current resonance pion production    dyn_dis_cc  0, 1  1  Turn on/off charge current deep inelastic scattering    dyn_dis_nc  0, 1  1  Turn on/off neutral current deep inelastic scattering    dyn_coh_cc  0, 1  1  Turn on/off charge current coherent pion production    dyn_coh_nc  0, 1  1  Turn on/off neutral current coherent pion production    dyn_mec_cc  0, 1  1  Turn on/off charge current meson exchange current process    dyn_mec_nc  0, 1  1  Turn on/off neutral current meson exchange current process",
            "title": "Interactions settings"
        },
        {
            "location": "/getting-started/parameters/#quasi-elastic",
            "text": "Parameter name  Possible arguments  Default value  Description      qel_vector_ff_set  1-6  2  Electromagnetic form factors parametrization: 1 - dipole form 2 - BBBA05 (Ref. [1]) 3 - BBA03 (Ref. [2]) 4 - JLab (Ref. [3]) 5 - NN10 with two photon exchange effect (Ref. [4])    qel_axial_ff_set  1-4  1  Axial form factors parametrization: 1 - dipole form 2 - 2-fold parabolic modification 3 - 3-fold parabolic modification 4 - 4-fold parabolic modification    qel_strange  0, 1  0  Turn on/off the strange quark contribution to the NC axial form factors    qel_strangeEM  0, 1  0  Turn on/off the strange quark contribution to the NC vector form factors    delta_s  any number  -0.15  Strangeness contribution    qel_cc_axial_mass  positive number  1200  The axial mass value for charge current form factors    qel_nc_axial_mass  positive number  1350  The axial mass value for neutral current form factors    qel_s_axial_mass  positive number  1200  The axial mass value used in the dipole strange form factor    qel_rpa  0-3  0  RPA settings: 0 - do not use RPA 1 - use RPA without effective mass of nucleon 2 - use effective mass of nucleon without RPA (test only)  3 - use RPA with effective mass of nucleon (test only)    flux_correction  0, 1  1  Turn on/off flux correction    sf_method  0-3  0  Spectral function settings (for CCQE): 0 - do not use spectral function 1 - use grid spectral function (for 12C, 16O, 40Ar, 40Ca, 56Fe) 2 - use factorized spectral function (for 16O, 40Ar, 40Ca)    cc_smoothing  0, 1  1  If 1, the impossible quasi-elastic reaction (like CC nu scattering off proton) are skipped",
            "title": "Quasi-elastic"
        },
        {
            "location": "/getting-started/parameters/#pion-production",
            "text": "Parameter name  Possible arguments  Default value  Description      delta_FF_set  1-7  1  Delta production form factors: 1 - dipole form [5] 2 - Paschos and Lalakulich, 2.12 MA = 1.05GeV BNL fit (Ref. [6]) 3 - Paschos and Lalakulich, 2.12 MA = 0.84GeV ANL fit (Ref. [6]) 4 - Paschos and Lalakulich, page 4, bottom right (Ref. [6]) 5 - Paschos and Lalakulich, page 5, top left (Ref. [6]) 6 - Eq. 13 from Ref. [7] 7 - based on chiral quark model from Ref. [8]    pion_axial_mass (for delta_FF_set 1)  positive number  0.94  The axial mass value used in dipole parametrization of the resonance pion production form factor    pion_C5A (for delta_FF_set 1)  positive number  1.19  The C5A value used in dipole parametrization of the resonance pion production form factor    spp_precision  positive number  500  Controls the precision in RESDIS boundary region; should not be changed    red_dis_cut  positive number  1600  Boundary of RES-DIS transition; should not be changed    coh_mass_correction  0, 1  1  Turn on/off Rein Sehgal correction to charge current coherent pion production    coh_new  0, 1  1  Change between old (0) and improved (1) implementation of coherent pion production",
            "title": "Pion production"
        },
        {
            "location": "/getting-started/parameters/#two-body-current",
            "text": "Parameter name  Possible arguments  Default value  Description      mec_kind  1-4  1  Two-body current models: 1 - Transverse Enhancement model (Ref. [9]) 2 - based on Marteau model (Ref. [10, 12]) 3 - Nieves et al. model (Ref. [11])    mec_ratio_pp  [0,1]  0.6  The fraction of mixed initial nucleon pairs for charge current interaction. For neutral current the fraction is calculated as 1/(2*mec ratio pp + 1)",
            "title": "Two-body current"
        },
        {
            "location": "/getting-started/parameters/#final-state-interactions",
            "text": "Parameter name  Possible arguments  Default value  Description      kaskada_on  0, 1  1  Turn on (1) / off (0) final state interactions    kaskada_w  positive number  7  The value of the effective potential subtracted from the nucleons energy leaving the nucleus    kaskada_redo  0, 1  0  If on, given output file ( eventsout.root  by default) is loaded, the primary vertex is copied and only final state interactions are simulated. New output file with  .fsi.root  suffix is created    kaskada_writeall  0, 1  0  If on, all particles created during final state interactions are saved in  all  vector    step  positive number  0.2  Length of max step in the cascade in fm    xsec  0, 1  1  Cross section models for pion-nucleon interactions:  0 - based on Ref. [13] 1 - based on Ref. [14]    pauli_blocking  0, 1  1  Turn on/off Pauli blocking    formation_length (for formation_zone const)  positive number  1  Formation length in fm    tau  positive number  8  The parameter control the formation length for  ranft  and  rl  models    first_step  0, 1  0  If off, the formation zone is applied only for the particles created during final state interactions    formation_zone  explained below  fz  explained below",
            "title": "Final state interactions"
        },
        {
            "location": "/getting-started/parameters/#formation-zone-models",
            "text": "nofz : formation zone is off  skat8 : SKAT parametrization (Ref. [15])  cosyn : parametrization based on Color Transparency measurements (Ref. [16])  cohl : coherence length (Ref. [17])  ranft : parametrization based on hadron-hadron and hadron-nucleus collision (Ref. [18])  rl : as  ranft  but with fixed transverse momentum equal zero  delta : for resonance pion production; based on \u2206 lifetime (Ref. [19])  const : constant value (defined by  formation_length )  fz  (default):  cohl  for quasi-elastic scattering  delta  for resonance pion production  ranft  for deep inelastic scattering  nofz  for meson exchange current    trans : only for nuclear transparency analysis",
            "title": "Formation zone models"
        },
        {
            "location": "/getting-started/parameters/#references",
            "text": "[1] R. Bradford et al. \u201cA New parameterization of the nucleon elastic form-factors\u201d. Nucl.Phys.Proc.Suppl.\n159 (2006), pp. 127\u2013132.  [2] Howard Scott Budd, A. Bodek, and J. Arrington. \u201cModeling quasielastic form-factors for\nelectron and neutrino scattering\u201d . arXiv: hep-ex/0308005 (2003).  [3] E.J. Brash et al. \u201cNew empirical fits to the proton electromagnetic form-factors\u201d. Phys.Rev.\nC65 (2002), p. 051001.  [4] Krzysztof M. Graczyk, Piotr Plonski, and Robert Sulej. \u201cNeural Network Parameterizations\nof Electromagnetic Nucleon Form Factors\u201d. JHEP. 1009 (2010), p. 053.  [5] K.M. Graczyk, D. Kielczewska, P. Przewlocki, and J.T. Sobczyk. \"C(5)**A axial form factor from bubble chamber experiments\". Phys.Rev. D80 (2009) 093001  [6] Olga Lalakulich and Emmanuel A. Paschos. \u201cResonance production by neutrinos. I. J = 3/2\nresonances\u201d. Phys.Rev. D71 (2005), p. 074003.  [7] L. Alvarez-Ruso, S. K. Singh, and M. J. Vicente Vacas. \u201cCharged current weak electroproduction\nof the \u2206 resonance\u201d. Phys. Rev. C. 57 (5 1998), pp. 2693\u20132699.  [8] D. Barquilla-Cano, A.J. Buchmann, and E. Hernandez. \u201cAxial N-\u00bfDelta(1232) and N-\u00bfN*(1440)\ntransition form factors\u201d. Phys.Rev. C75 (2007), p. 065203.  [9] A. Bodek, H.S. Budd, and M.E. Christy. \u201cNeutrino Quasielastic Scattering on Nuclear Targets:\nParametrizing Transverse Enhancement (Meson Exchange Currents)\u201d. Eur.Phys.J. C71 (2011), p. 1726.  [10] Jan T. Sobczyk. \u201cModeling nuclear effects in neutrino interactions in 1-GeV region\u201d . arXiv:\nnucl-th/0307047 (2003).  [11] J. Nieves, I. Ruiz Simo, and M. J. Vicente Vacas. \u201cInclusive charged-current neutrino-nucleus\nreactions\u201d. Phys. Rev. C. 83 (4 2011), p. 045501.  [12] M. Martini et al. \u201cUnified approach for nucleon knock-out and coherent and incoherent pion\nproduction in neutrino interactions with nuclei\u201d. Phys. Rev. C. 80 (6 2009), p. 065501.  [13] N. Metropolis et al. \u201cMonte Carlo Calculations on Intranuclear Cascades. I. Low-Energy\nStudies\u201d. Phys.Rev. 110 (1958), pp. 185\u2013203.  [14] L.L. Salcedo et al. \u201cComputer simulation of inclusive pion nuclear reactions\u201d. Nucl.Phys.\nA484 (1988), p. 557.  [15] D.S. Baranov et al. \u201cAn estimate for the formation length of hadrons in neutrino interactions\u201d\n(1984).  [16] Wim Cosyn. \u201cExploring the limits of a hadronic picture of nuclei through pion and nucleon\nremoval reactions\u201d. PhD thesis. Ghent University, 2009. url: http://lib.ugent.be/fulltxt/RUG01/001/350/817/RUG01-001350817/_2010/_0001/_AC.pdf1  [17] A. Rubbia G. Battistoni A. Ferrari and P.R. Sala. The FLUKA nuclear cascade model applied\nto neutrino interactions. talk given at NuInt02. 2002.  [18] J. Ranft. \u201cHadron production in hadron-nucleus and nucleus-nucleus collisions in a dual\nparton model modified by a formation zone intranuclear cascade\u201d. Zeitschrift f\u00a8ur Physik C\nParticles and Fields. 43.3 (1989), pp. 439\u2013446.  [19] Tomasz Golan, Cezary Juszczak, and Jan T. Sobczyk. \u201cFinal State Interactions Effects in\nNeutrino-Nucleus Interactions\u201d. Phys.Rev. C86 (2012), p. 015505.",
            "title": "References"
        },
        {
            "location": "/analyze-output/basics/",
            "text": "Work in progress. Meanwhile, you can find more information in the\n\ntutorial\n.\n\n\n\n\nEvent\n\u00b6\n\n\nGenerated events are represented by objects of \nclass event : public TObject\n.\nThey are saved in an output \nROOT\n file under a \nTTree\n named \n\"treeout\"\n.\nEach \nevent\n object stores all information about a single neutrino scattering process.\n\n\nThis section describes informations you can extract from an \nevent\n object.\n\n\n\n\nNote\n\n\nclass event : public TObject\n provides many useful public variables and methods\nto use when analyze a ROOT output file.\nThis section describes some of them. For the full list please refer to\n\nnuwro/src/event1.h\n.\n\n\n\n\nFlags\n\u00b6\n\n\nevent.flag\n stores the structure of the following flags:\n\n\n\n\n\n\n\n\nFlag\n\n\nTrue for\n\n\n\n\n\n\n\n\n\n\nqel\n\n\n(quasi-)elastic event\n\n\n\n\n\n\nres\n\n\npion production event through resonance excitation\n\n\n\n\n\n\ndis\n\n\ndeep inelastic scattering event\n\n\n\n\n\n\nmec\n\n\ntwo-body current event\n\n\n\n\n\n\nnc\n\n\nneutral current event\n\n\n\n\n\n\ncc\n\n\ncharged current event\n\n\n\n\n\n\n\n\n\n\nPlease note that RES channel is mainly pion production through\nDelta resonance, however, in general it is defined as inelastic\nevents with invariant mass below 1.6 GeV. Everything above that\nvalue is marked as DIS channel.\n\n\n\n\nVectors of particles\n\u00b6\n\n\nThere are three main \nstd::vectors\n of particles:\n\n\n\n\n\n\n\n\nVector\n\n\nStores\n\n\n\n\n\n\n\n\n\n\nin\n\n\ninitial state particles in primary vertex\n\n\n\n\n\n\nout\n\n\nfinal state particles in primary vertex\n\n\n\n\n\n\npost\n\n\nfinal state particles after final state interactions\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe convention is that a lepton is always first particle in a vector, so:\n\n\n\n\nin[0]\n - incoming neutrino\n\n\nout[0]\n - outgoing neutrino / charged lepton\n\n\n\n\n\n\nMore information about \nparticle\n class can be found in \nparticle section\n.\n\n\nParticles multiplicities\n\u00b6\n\n\nAlthough one can grab particles multiplicities directly from vectors,\nthere are several methods to make it easier:\n\n\n\n\n\n\n\n\nMethod\n\n\nReturns the number of final state particles\n\n\n\n\n\n\n\n\n\n\nint n();\n\n\nafter primary vertex\n\n\n\n\n\n\nint f();\n\n\nafter final state interactions\n\n\n\n\n\n\nint nof(int pdg);\n\n\nafter primary vertex given by the PDG code\n\n\n\n\n\n\nint fof(int pdg);\n\n\nafter final state interactions given by the PDG code\n\n\n\n\n\n\n\n\nKinematics\n\u00b6\n\n\nThere are only few kinematics methods for an event\n(see \nparticle section\n for more):\n\n\n\n\n\n\n\n\nMethod\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\nvect q();\n\n\nfour-momentum transfer (more on \nvect class\n)\n\n\n\n\n\n\ndouble q2();\n\n\nfour-momentum transfer squared\n\n\n\n\n\n\ndouble W\n();`\n\n\ninvariant mass\n\n\n\n\n\n\n\n\n\n\nPlease note default NuWro units is MeV.\n\n\n\n\nFinal state interactions\n\u00b6\n\n\nThe following methods return the number of specific interaction type,\nhappened during final state interactions:\n\n\n\n\n\n\n\n\nMethod\n\n\nReturns the number of\n\n\n\n\n\n\n\n\n\n\nint number_of_nucleon_elastic();\n\n\nnucleon elastic\n\n\n\n\n\n\nint number_of_nucleon_spp();\n\n\nnucleon single pion production\n\n\n\n\n\n\nint number_of_nucleon_dpp();\n\n\nnucleon double pion production\n\n\n\n\n\n\nint number_of_pion_elastic();\n\n\npion elastic\n\n\n\n\n\n\nint number_of_pion_ce();\n\n\npion charge exchange\n\n\n\n\n\n\nint number_of_pion_spp();\n\n\npion single pion production\n\n\n\n\n\n\nint number_of_pion_dpp();\n\n\npion double pion production\n\n\n\n\n\n\nint number_of_pion_tpp();\n\n\npion triple pion production\n\n\n\n\n\n\nint number_of_pion_abs();\n\n\npion absorption\n\n\n\n\n\n\nint number_of_interactions();\n\n\nthe sum of above\n\n\n\n\n\n\n\n\nSimulation settings\n\u00b6\n\n\nevent.par\n stores the copy of parameters used for a simulation.\nPlease note, that some values may be different from event to event\n(e.g. target nucleus for detector simulations).\n\n\nParticle\n\u00b6\n\n\nEvents keep information about initial and final states particles\nin \nstd::vector <particle>\n (as described \nhere\n).\nUsually, one has to loop over these vectors to extract information about\nfinal state particles.\n\n\nThis section describes informations you can find in a \nparticle\n class object.\n\n\n\n\nNote\n\n\nclass particle : public vect\n provides many useful public variables and methods\nto use when analyze a ROOT output file.\nThis section describes some of them. For the full list please refer to\n\nnuwro/src/particle.h\n.\n\n\n\n\nSelected methods\n\u00b6\n\n\n\n\n\n\n\n\nMethod\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\ndouble E();\n\n\ntotal energy\n\n\n\n\n\n\ndouble energy();\n\n\ntotal energy\n\n\n\n\n\n\ndouble Ek();\n\n\nkinetic energy\n\n\n\n\n\n\ndouble m();\n\n\nmass\n\n\n\n\n\n\ndouble mass();\n\n\nmass\n\n\n\n\n\n\ndouble mass2();\n\n\nmass squared\n\n\n\n\n\n\ndouble momentum();\n\n\nvalue of the momentum\n\n\n\n\n\n\ndouble momentum2();\n\n\nmomentum squared\n\n\n\n\n\n\nvec p();\n\n\nmomentum as a 3-vector\n\n\n\n\n\n\nvect& p4();\n\n\nfour-momentum\n\n\n\n\n\n\nbool lepton();\n\n\ntrue if lepton\n\n\n\n\n\n\nbool pion();\n\n\ntrue if pion\n\n\n\n\n\n\nbool nucleon();\n\n\ntrue if nucleon\n\n\n\n\n\n\n\n\n\n\nPlease note default NuWro units is MeV.\n\n\n\n\nSelected variables\n\u00b6\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nint pdg;\n\n\nPDG code\n\n\n\n\n\n\n\n\nVectors\n\u00b6\n\n\nThere are two classes for handling vectors:\n\n\n\n\nclass vec\n: 3-vectors (x, y, z)\n\n\nclass vect\n: 4-vectors (t, x, y, z)\n\n\n\n\nThey both overload all reasonable operators, so vectors algebra is straightforward.\n\n\nNot much to say about it - they are vectors. If you feel like reading more on that\nplease see \nnuwro/src/vec.h\n and \nnuwro/src/vect.h\n.",
            "title": "Basics"
        },
        {
            "location": "/analyze-output/basics/#event",
            "text": "Generated events are represented by objects of  class event : public TObject .\nThey are saved in an output  ROOT  file under a  TTree  named  \"treeout\" .\nEach  event  object stores all information about a single neutrino scattering process.  This section describes informations you can extract from an  event  object.   Note  class event : public TObject  provides many useful public variables and methods\nto use when analyze a ROOT output file.\nThis section describes some of them. For the full list please refer to nuwro/src/event1.h .",
            "title": "Event"
        },
        {
            "location": "/analyze-output/basics/#flags",
            "text": "event.flag  stores the structure of the following flags:     Flag  True for      qel  (quasi-)elastic event    res  pion production event through resonance excitation    dis  deep inelastic scattering event    mec  two-body current event    nc  neutral current event    cc  charged current event      Please note that RES channel is mainly pion production through\nDelta resonance, however, in general it is defined as inelastic\nevents with invariant mass below 1.6 GeV. Everything above that\nvalue is marked as DIS channel.",
            "title": "Flags"
        },
        {
            "location": "/analyze-output/basics/#vectors-of-particles",
            "text": "There are three main  std::vectors  of particles:     Vector  Stores      in  initial state particles in primary vertex    out  final state particles in primary vertex    post  final state particles after final state interactions      Note  The convention is that a lepton is always first particle in a vector, so:   in[0]  - incoming neutrino  out[0]  - outgoing neutrino / charged lepton    More information about  particle  class can be found in  particle section .",
            "title": "Vectors of particles"
        },
        {
            "location": "/analyze-output/basics/#particles-multiplicities",
            "text": "Although one can grab particles multiplicities directly from vectors,\nthere are several methods to make it easier:     Method  Returns the number of final state particles      int n();  after primary vertex    int f();  after final state interactions    int nof(int pdg);  after primary vertex given by the PDG code    int fof(int pdg);  after final state interactions given by the PDG code",
            "title": "Particles multiplicities"
        },
        {
            "location": "/analyze-output/basics/#kinematics",
            "text": "There are only few kinematics methods for an event\n(see  particle section  for more):     Method  Returns      vect q();  four-momentum transfer (more on  vect class )    double q2();  four-momentum transfer squared    double W ();`  invariant mass      Please note default NuWro units is MeV.",
            "title": "Kinematics"
        },
        {
            "location": "/analyze-output/basics/#final-state-interactions",
            "text": "The following methods return the number of specific interaction type,\nhappened during final state interactions:     Method  Returns the number of      int number_of_nucleon_elastic();  nucleon elastic    int number_of_nucleon_spp();  nucleon single pion production    int number_of_nucleon_dpp();  nucleon double pion production    int number_of_pion_elastic();  pion elastic    int number_of_pion_ce();  pion charge exchange    int number_of_pion_spp();  pion single pion production    int number_of_pion_dpp();  pion double pion production    int number_of_pion_tpp();  pion triple pion production    int number_of_pion_abs();  pion absorption    int number_of_interactions();  the sum of above",
            "title": "Final state interactions"
        },
        {
            "location": "/analyze-output/basics/#simulation-settings",
            "text": "event.par  stores the copy of parameters used for a simulation.\nPlease note, that some values may be different from event to event\n(e.g. target nucleus for detector simulations).",
            "title": "Simulation settings"
        },
        {
            "location": "/analyze-output/basics/#particle",
            "text": "Events keep information about initial and final states particles\nin  std::vector <particle>  (as described  here ).\nUsually, one has to loop over these vectors to extract information about\nfinal state particles.  This section describes informations you can find in a  particle  class object.   Note  class particle : public vect  provides many useful public variables and methods\nto use when analyze a ROOT output file.\nThis section describes some of them. For the full list please refer to nuwro/src/particle.h .",
            "title": "Particle"
        },
        {
            "location": "/analyze-output/basics/#selected-methods",
            "text": "Method  Returns      double E();  total energy    double energy();  total energy    double Ek();  kinetic energy    double m();  mass    double mass();  mass    double mass2();  mass squared    double momentum();  value of the momentum    double momentum2();  momentum squared    vec p();  momentum as a 3-vector    vect& p4();  four-momentum    bool lepton();  true if lepton    bool pion();  true if pion    bool nucleon();  true if nucleon      Please note default NuWro units is MeV.",
            "title": "Selected methods"
        },
        {
            "location": "/analyze-output/basics/#selected-variables",
            "text": "Method  Description      int pdg;  PDG code",
            "title": "Selected variables"
        },
        {
            "location": "/analyze-output/basics/#vectors",
            "text": "There are two classes for handling vectors:   class vec : 3-vectors (x, y, z)  class vect : 4-vectors (t, x, y, z)   They both overload all reasonable operators, so vectors algebra is straightforward.  Not much to say about it - they are vectors. If you feel like reading more on that\nplease see  nuwro/src/vec.h  and  nuwro/src/vect.h .",
            "title": "Vectors"
        },
        {
            "location": "/analyze-output/interactive/",
            "text": "You can analyze NuWro output in the \nROOT\n interactive mode.\nTo use variables and methods described in \nbasics section\n\nyou need to load a proper dictionary. It is as simple as running\nROOT through \nmyroot\n located in \nnuwro/bin\n.\n\n\n\n\nJust type \nmyroot\n if you have \nnuwro/bin\n added to your \n$PATH\n\n\n\n\nFirst you need to load a \nROOT\n file and point to the right \nTTree\n:\n\n\nroot [0] TFile* file = new TFile (\"/path/to/output.root\")\nroot [1] TTree* tree = (TTree*)file->Get(\"treeout\")\n\n\n\n\n\nYou can easily draw any distribution for variables described\nin \nbasics section\n using \nDraw\n function.\n\n\n\n\nExample\n\n\nTo draw Q2 distribution simply type:\n\n\nroot [2] tree->Draw(\"-q2()\")\n\n\n\n\n\nwhich access \nevent->q2()\n.\n\n\n\n\n\n\n\n\nExample\n\n\nTo draw target nucleon (\nin[1]\n) momentum distribution:\n\n\nroot [3] tree->Draw(\"in[1].momentum()\")\n\n\n\n\n\nwhich access \nevent->particle->momentum()\n.\n\n\n\n\n\n\n\n\nExample\n\n\nTo draw outgoing lepton momentum \nz\n component:\n\n\nroot [4] tree->Draw(\"out[0].p().z\")\n\n\n\n\n\nwhich access \nevent->particle->vec->z\n.\n\n\n\n\n\n\n\n\nExample\n\n\nYou can add cuts by providing boolean expression as a second argument of\n\nDraw\n function:\n\n\nroot [5] tree->Draw(\"-q2()\", \"out[0].Ek() > 500\")\n\n\n\n\n\nwhich draws Q2 distribution for events with outgoing lepton kinetic energy\nabove 500 MeV.",
            "title": "Interactive mode"
        },
        {
            "location": "/analyze-output/macros/",
            "text": "There are some basic examples of using the interactive \nROOT\n mode\nto extract informations from a NuWro output file\nin the \nprevious section\n. Usually, what you really want\nis to have a \nROOT\n macro to do that. This section contains some examples\nof how to prepare them to work with events generated by NuWro.\n\n\n\n\nYou can find \nROOT\n documentation \nhere\n\n\n\n\nPreparing a sample\n\u00b6\n\n\nFor the examples in this section the following sample was generated:\n\n\n\n\nbeam: muon neutrino with energy = 1 GeV\n\n\ntarget: Carbon\n\n\nchannels: all CC\n\n\nno. of events: 1 000 000\n\n\n\n\nusing the following command:\n\n\nnuwro -i numu_1gev_carbon_cc.txt -o numu_1gev_carbon_cc.root\n\n\n\n\n\nwith the following \nnumu_1gev_carbon_cc.txt\n settings file:\n\n\n####################\n\n\n# General settings #\n\n\n####################\n\n\n\nnumber_of_events\n \n=\n \n1000000\n  \n// the number of events to generate\n\n\n\n#################\n\n\n# Beam settings #\n\n\n#################\n\n\n\nbeam_type\n \n=\n \n0\n       \n// single-flavor beam\n\n\nbeam_particle\n \n=\n \n14\n  \n// muon neutrino\n\n\nbeam_energy\n \n=\n \n1000\n  \n// mono-energetic beam (1000 MeV)\n\n\n\n###################\n\n\n# Target settings #\n\n\n###################\n\n\n\n@\ntarget\n/\nC\n.\ntxt\n  \n// Carbon\n\n\n\n#########################\n\n\n# Interactions settings #\n\n\n#########################\n\n\n\ndyn_qel_cc\n \n=\n \n1\n  \n// charged current quasi-elastic\n\n\ndyn_qel_nc\n \n=\n \n0\n  \n// neutral current elastic\n\n\ndyn_res_cc\n \n=\n \n1\n  \n// charged current resonant pion production\n\n\ndyn_res_nc\n \n=\n \n0\n  \n// neutral current resonant pion production\n\n\ndyn_dis_cc\n \n=\n \n1\n  \n// charged current deep inelastic scattering\n\n\ndyn_dis_nc\n \n=\n \n0\n  \n// neutral current deep inelastic scattering\n\n\ndyn_coh_cc\n \n=\n \n1\n  \n// charged current coherent pion production\n\n\ndyn_coh_nc\n \n=\n \n0\n  \n// neutral current coherent pion production\n\n\ndyn_mec_cc\n \n=\n \n1\n  \n// charged current 2p2\n\n\ndyn_mec_nc\n \n=\n \n0\n  \n// neutral current 2p2h\n\n\n\n##########################################\n\n\n# Interactions settings: (quasi-)elastic #\n\n\n##########################################\n\n\n\nqel_cc_axial_mass\n \n=\n \n1030\n  \n// axial mass [MeV]\n\n\n\n###########################################\n\n\n# Interactions settings: two-body current #\n\n\n###########################################\n\n\n\nmec_kind\n \n=\n \n3\n  \n// Nieves et al. model\n\n\n\n\n\n\n\n\nNote\n\n\nYou can see that \nnumu_1gev_carbon_cc.txt\n does not include all parameters\n(like e.g. \nnuwro/data/params.txt\n settings file example).\n\n\nFor all parameters which were not provided in a settings file\nNuWro will use default values as described \nhere\n.\n\n\n\n\nBasic plots\n\u00b6\n\n\nHistograms created by \nDraw\n\u00b6\n\n\nIn the \nprevious section\n you can find some basic examples\nfor using the \nDraw\n function to make plots, e.g.\n\n\ntree->Draw(\"-q2()\")\n\n\n\n\n\nThe \nDraw\n function can be also used to create \nROOT\n histograms, e.g.\n\n\ntree->Draw(\"-q2() >> my_histogram\")\n\n\n\n\n\nwill draw the histogram but also save it in \nTH1F *my_histogram\n. Pretty handy.\n\n\nYou may want to use \nDraw\n to create \nTH1\n objects w/o actually drawing them.\nWell, just turn \ng\nraphics \noff\n:\n\n\ntree->Draw(\"-q2() >> my_histogram\", \"\", \"goff\");\n\n\n\n\n\nHaving said that, take a look at the following macro (\nbasic_plots.c\n):\n\n\nvoid\n \nbasic_plots\n(\nchar\n \n*\nfilename\n)\n\n\n{\n\n    \n///// LOAD FILE AND TTREE /////\n\n\n    \nTFile\n \n*\nfile\n \n=\n \nnew\n \nTFile\n(\nfilename\n);\n\n    \nTTree\n \n*\ntree\n \n=\n \n(\nTTree\n*\n)\nfile\n->\nGet\n(\n\"treeout\"\n);\n\n\n    \n///// CREATE HISTOGRAMS /////\n\n\n    \n// Q2 distribution\n\n    \ntree\n->\nDraw\n(\n\"-q2() >> q2\"\n,\n \n\"\"\n,\n \n\"goff\"\n);\n\n    \n// Q2 distribution only for QEL events\n\n    \ntree\n->\nDraw\n(\n\"-q2() >> q2_qel_true\"\n,\n \n\"flag.qel\"\n,\n \n\"goff\"\n);\n\n    \n// Q2 distribution for events w/o any pion in the final state\n\n    \ntree\n->\nDraw\n(\n\"-q2() >> q2_qel_like\"\n,\n \n               \n\"fof(211) + fof(111) + fof(-211) == 0\"\n,\n\n               \n\"goff\"\n);\n\n    \n// Q2 distribution for non-QEL events w/o any pion in the final state\n\n    \ntree\n->\nDraw\n(\n\"-q2() >> q2_bkg\"\n,\n\n               \n\"!flag->qel && fof(211) + fof(111) + fof(-211) == 0\"\n,\n\n               \n\"goff\"\n);\n\n\n\n    \n///// HISTOGRAM SETTINGS /////\n\n\n    \nq2\n->\nSetLineColor\n(\nkBlack\n);\n\n    \nq2\n->\nSetTitle\n(\n\"#nu_{#mu} on Carbon, E_{#nu} = 1 GeV\"\n);\n\n    \nq2\n->\nSetXTitle\n(\n\"Q^{2} [MeV^{2}]\"\n);\n\n\n    \nq2_qel_true\n->\nSetLineColor\n(\nkBlue\n);\n\n    \nq2_qel_like\n->\nSetLineColor\n(\nkGreen\n);\n\n    \nq2_bkg\n->\nSetLineColor\n(\nkRed\n);\n\n\n    \n///// SAVE HISTOGRAMS /////\n\n\n    \n// first you need a canvas\n\n    \nTCanvas\n \n*\nc\n \n=\n \nnew\n \nTCanvas\n;\n\n\n    \nq2\n->\nDraw\n();\n\n    \nq2_qel_true\n->\nDraw\n(\n\"same\"\n);\n \n// \"same\" -> on the same plot\n\n    \nq2_qel_like\n->\nDraw\n(\n\"same\"\n);\n\n    \nq2_bkg\n->\nDraw\n(\n\"same\"\n);\n\n\n    \nc\n->\nPrint\n(\n\"numu_1gev_carbon_cc.q2.svg\"\n);\n\n\n}\n\n\n\n\n\n\nAt the beginning a file is loaded and a right tree is pointed. Get used to it\nas every of your scripts is going to start like this. Histograms are created\nusing \nDraw\n function (as explained above):\n\n\nDraw\n(\n\"what >> histogram\"\n,\n \n\"[conditions]\"\n,\n \n\"[graphics off]\"\n)\n\n\n\n\n\n\nSetting up labels, colors etc. are not worth to discuss here\n- it is not \nROOT\n tutorial after all.\nPlease see \nROOT\n documentation\n\nfor more informations.\n\n\nInstead of using default \nc1\n canvas we create our own.\nNow, every \nhistogram->Draw()\n call will be put on the canvas.\nPlease note, that if \n\"same\"\n option is not used,\ncurrent content of the canvas will be overwritten.\n\n\nFinally, \nPrint\n function is used to save the plot to \nSVG\n file.\n\n\nPlease note, that the main function in the macro has the same name as\nthe macro file. It makes it easy to run the macro directly from\nthe command line:\n\n\nmyroot -b -q 'basic_plots.c(\"numu_1gev_carbon_cc.root\")'\n\n\n\n\n\n-b\n stands for batch mode (w/o graphics) and \n-q\n is to exit \nROOT\n after\njob is done.\n\n\nThis call is equivalent to:\n\n\n$ myroot -b\nroot \n[\n0\n]\n .L basic_plots.c \nroot \n[\n1\n]\n basic_plots\n(\n\"numu_1gev_carbon_cc.root\"\n)\n\nroot \n[\n2\n]\n .q\n\n\n\n\n\nThe final plot (\"numu_1gev_carbon_cc.q2.svg\"):\n\n\n\n\nHistograms created by hand\n\u00b6",
            "title": "ROOT macros"
        },
        {
            "location": "/analyze-output/macros/#preparing-a-sample",
            "text": "For the examples in this section the following sample was generated:   beam: muon neutrino with energy = 1 GeV  target: Carbon  channels: all CC  no. of events: 1 000 000   using the following command:  nuwro -i numu_1gev_carbon_cc.txt -o numu_1gev_carbon_cc.root  with the following  numu_1gev_carbon_cc.txt  settings file:  ####################  # General settings #  ####################  number_of_events   =   1000000    // the number of events to generate  #################  # Beam settings #  #################  beam_type   =   0         // single-flavor beam  beam_particle   =   14    // muon neutrino  beam_energy   =   1000    // mono-energetic beam (1000 MeV)  ###################  # Target settings #  ###################  @ target / C . txt    // Carbon  #########################  # Interactions settings #  #########################  dyn_qel_cc   =   1    // charged current quasi-elastic  dyn_qel_nc   =   0    // neutral current elastic  dyn_res_cc   =   1    // charged current resonant pion production  dyn_res_nc   =   0    // neutral current resonant pion production  dyn_dis_cc   =   1    // charged current deep inelastic scattering  dyn_dis_nc   =   0    // neutral current deep inelastic scattering  dyn_coh_cc   =   1    // charged current coherent pion production  dyn_coh_nc   =   0    // neutral current coherent pion production  dyn_mec_cc   =   1    // charged current 2p2  dyn_mec_nc   =   0    // neutral current 2p2h  ##########################################  # Interactions settings: (quasi-)elastic #  ##########################################  qel_cc_axial_mass   =   1030    // axial mass [MeV]  ###########################################  # Interactions settings: two-body current #  ###########################################  mec_kind   =   3    // Nieves et al. model    Note  You can see that  numu_1gev_carbon_cc.txt  does not include all parameters\n(like e.g.  nuwro/data/params.txt  settings file example).  For all parameters which were not provided in a settings file\nNuWro will use default values as described  here .",
            "title": "Preparing a sample"
        },
        {
            "location": "/analyze-output/macros/#basic-plots",
            "text": "",
            "title": "Basic plots"
        },
        {
            "location": "/analyze-output/macros/#histograms-created-by-draw",
            "text": "In the  previous section  you can find some basic examples\nfor using the  Draw  function to make plots, e.g.  tree->Draw(\"-q2()\")  The  Draw  function can be also used to create  ROOT  histograms, e.g.  tree->Draw(\"-q2() >> my_histogram\")  will draw the histogram but also save it in  TH1F *my_histogram . Pretty handy.  You may want to use  Draw  to create  TH1  objects w/o actually drawing them.\nWell, just turn  g raphics  off :  tree->Draw(\"-q2() >> my_histogram\", \"\", \"goff\");  Having said that, take a look at the following macro ( basic_plots.c ):  void   basic_plots ( char   * filename )  { \n     ///// LOAD FILE AND TTREE ///// \n\n     TFile   * file   =   new   TFile ( filename ); \n     TTree   * tree   =   ( TTree * ) file -> Get ( \"treeout\" ); \n\n     ///// CREATE HISTOGRAMS ///// \n\n     // Q2 distribution \n     tree -> Draw ( \"-q2() >> q2\" ,   \"\" ,   \"goff\" ); \n     // Q2 distribution only for QEL events \n     tree -> Draw ( \"-q2() >> q2_qel_true\" ,   \"flag.qel\" ,   \"goff\" ); \n     // Q2 distribution for events w/o any pion in the final state \n     tree -> Draw ( \"-q2() >> q2_qel_like\" ,  \n                \"fof(211) + fof(111) + fof(-211) == 0\" , \n                \"goff\" ); \n     // Q2 distribution for non-QEL events w/o any pion in the final state \n     tree -> Draw ( \"-q2() >> q2_bkg\" , \n                \"!flag->qel && fof(211) + fof(111) + fof(-211) == 0\" , \n                \"goff\" ); \n\n\n     ///// HISTOGRAM SETTINGS ///// \n\n     q2 -> SetLineColor ( kBlack ); \n     q2 -> SetTitle ( \"#nu_{#mu} on Carbon, E_{#nu} = 1 GeV\" ); \n     q2 -> SetXTitle ( \"Q^{2} [MeV^{2}]\" ); \n\n     q2_qel_true -> SetLineColor ( kBlue ); \n     q2_qel_like -> SetLineColor ( kGreen ); \n     q2_bkg -> SetLineColor ( kRed ); \n\n     ///// SAVE HISTOGRAMS ///// \n\n     // first you need a canvas \n     TCanvas   * c   =   new   TCanvas ; \n\n     q2 -> Draw (); \n     q2_qel_true -> Draw ( \"same\" );   // \"same\" -> on the same plot \n     q2_qel_like -> Draw ( \"same\" ); \n     q2_bkg -> Draw ( \"same\" ); \n\n     c -> Print ( \"numu_1gev_carbon_cc.q2.svg\" );  }   At the beginning a file is loaded and a right tree is pointed. Get used to it\nas every of your scripts is going to start like this. Histograms are created\nusing  Draw  function (as explained above):  Draw ( \"what >> histogram\" ,   \"[conditions]\" ,   \"[graphics off]\" )   Setting up labels, colors etc. are not worth to discuss here\n- it is not  ROOT  tutorial after all.\nPlease see  ROOT  documentation \nfor more informations.  Instead of using default  c1  canvas we create our own.\nNow, every  histogram->Draw()  call will be put on the canvas.\nPlease note, that if  \"same\"  option is not used,\ncurrent content of the canvas will be overwritten.  Finally,  Print  function is used to save the plot to  SVG  file.  Please note, that the main function in the macro has the same name as\nthe macro file. It makes it easy to run the macro directly from\nthe command line:  myroot -b -q 'basic_plots.c(\"numu_1gev_carbon_cc.root\")'  -b  stands for batch mode (w/o graphics) and  -q  is to exit  ROOT  after\njob is done.  This call is equivalent to:  $ myroot -b\nroot  [ 0 ]  .L basic_plots.c \nroot  [ 1 ]  basic_plots ( \"numu_1gev_carbon_cc.root\" ) \nroot  [ 2 ]  .q  The final plot (\"numu_1gev_carbon_cc.q2.svg\"):",
            "title": "Histograms created by Draw"
        },
        {
            "location": "/analyze-output/macros/#histograms-created-by-hand",
            "text": "",
            "title": "Histograms created by hand"
        },
        {
            "location": "/references/",
            "text": "General\n\u00b6\n\n\n\n\nFinal State Interactions Effects in Neutrino-Nucleus Interactions\n\n\nT. Golan, C. Juszczak, J.T. Sobczyk, \nPhys.Rev. C86 (2012) 015505\n\n\n\n\n\n\nModeling nuclear effects in NuWro Monte Carlo neutrino event generator\n\n\nT. Golan, \nPhD theis\n\n\n\n\n\n\nSimulations from a new neutrino event generator\n\n\nC. Juszczak, J.A. Nowak, J.T. Sobczyk, \nNucl.Phys.Proc.Suppl. 159 (2006) 211-216\n\n\n\n\n\n\nNuWro: the Wroclaw Monte Carlo Generator of Neutrino Interactions\n\n\nT. Golan, J.T. Sobczyk, J. Zmuda, \nNucl.Phys.Proc.Suppl. 229-232 (2012) 499\n\n\n\n\nModels\n\u00b6\n\n\nSpectral function\n\u00b6\n\n\n\n\nOn extraction of value of axial mass from MiniBooNE neutrino quasi-elastic double differential cross section data\n\n\nC. Juszczak, J.T. Sobczyk, J. Zmuda, \nPhys.Rev. C82 (2010) 045502\n\n\n\n\n\n\nConstruction of spectral functions for medium-mass nuclei\n\n\nA.M. Ankowski, J.T. Sobczyk, \nPhys.Rev. C77 (2008) 044311\n\n\n\n\nRandom phase approximation\n\u00b6\n\n\n\n\nThe Algebraic solution of RPA equations for the charged current quasielastic neutrino nucleus scattering\n\n\nK.M. Graczyk, J.T. Sobczyk, \nEur.Phys.J. C31 (2003) 177-185\n\n\n\n\nEffective potential\n\u00b6\n\n\n\n\nSpectrum of recoil nucleons in quasi-elastic neutrino nucleus interactions\n\n\nC. Juszczak, J.A. Nowak, J.T. Sobczyk, \nEur.Phys.J. C39 (2005) 195-200\n\n\n\n\nFinal state interactions\n\u00b6\n\n\n\n\nFinal State Interactions Effects in Neutrino-Nucleus Interactions\n\n\nT. Golan, C. Juszczak, J.T. Sobczyk, \nPhys.Rev. C86 (2012) 015505\n\n\n\n\nResonance pion production\n\u00b6\n\n\n\n\nSimulations from a new neutrino event generator\n\n\nC. Juszczak, J.A. Nowak, J.T. Sobczyk, \nNucl.Phys.Proc.Suppl. 159 (2006) 211-216\n\n\n\n\n\n\nWroNG - Wroclaw Neutrino Generator of events for single pion production\n\n\nJ.T. Sobczyk, J.A. Nowak, K.M. Graczyk, \nNucl.Phys.Proc.Suppl. 139 (2005) 266-271\n\n\n\n\n\n\nC(5)\nA axial form factor from bubble chamber experiments\n\n\nK.M. Graczyk, D. Kielczewska, P. Przewlocki, J.T. Sobczyk, \nPhys.Rev. D80 (2009) 093001\n\n\n\n\n\n\nInvestigation of recent weak single-pion production data\n\n\nJ.T. Sobczyk, J. \u017bmuda, \nPhys.Rev. C91 (2015) no.4, 045501\n\n\n\n\nDeep inelastic scattering\n\u00b6\n\n\n\n\nHadron production in Wroclaw neutrino event generator\n\n\nJ.A. Nowak, J.T. Sobczyk, \nActa Phys.Polon. B37 (2006) 2371-2378\n\n\n\n\n\n\nNuWro: Monte Carlo generator of neutrino interactions\n\n\nJ. Sobczyk, \nPoS NUFACT08 (2008) 141\n\n\n\n\nMeson exchange current\n\u00b6\n\n\n\n\nMultinucleon ejection model for Meson Exchange Current neutrino interactions\n\n\nJ.T. Sobczyk, \nPhys.Rev. C86 (2012) 015504\n\n\n\n\n\n\nExtraction of Axial Mass and Strangeness Values from the MiniBooNE Neutral Current Elastic Cross Section Measurement\n\n\nT. Golan, K.M. Graczyk, C. Juszczak, J.T. Sobczyk, \nPhys.Rev. C88 (2013) 024612\n\n\n\n\neWro\n\u00b6\n\n\n\n\nNuWro Monte Carlo generator of neutrino interactions - first electron scattering results\n\n\nJ. \u017bmuda, K.M. Graczyk, C. Juszczak, J.T. Sobczyk, \nActa Phys.Polon. B46 (2015) no.11, 2329",
            "title": "References"
        },
        {
            "location": "/references/#general",
            "text": "Final State Interactions Effects in Neutrino-Nucleus Interactions  T. Golan, C. Juszczak, J.T. Sobczyk,  Phys.Rev. C86 (2012) 015505    Modeling nuclear effects in NuWro Monte Carlo neutrino event generator  T. Golan,  PhD theis    Simulations from a new neutrino event generator  C. Juszczak, J.A. Nowak, J.T. Sobczyk,  Nucl.Phys.Proc.Suppl. 159 (2006) 211-216    NuWro: the Wroclaw Monte Carlo Generator of Neutrino Interactions  T. Golan, J.T. Sobczyk, J. Zmuda,  Nucl.Phys.Proc.Suppl. 229-232 (2012) 499",
            "title": "General"
        },
        {
            "location": "/references/#models",
            "text": "",
            "title": "Models"
        },
        {
            "location": "/references/#spectral-function",
            "text": "On extraction of value of axial mass from MiniBooNE neutrino quasi-elastic double differential cross section data  C. Juszczak, J.T. Sobczyk, J. Zmuda,  Phys.Rev. C82 (2010) 045502    Construction of spectral functions for medium-mass nuclei  A.M. Ankowski, J.T. Sobczyk,  Phys.Rev. C77 (2008) 044311",
            "title": "Spectral function"
        },
        {
            "location": "/references/#random-phase-approximation",
            "text": "The Algebraic solution of RPA equations for the charged current quasielastic neutrino nucleus scattering  K.M. Graczyk, J.T. Sobczyk,  Eur.Phys.J. C31 (2003) 177-185",
            "title": "Random phase approximation"
        },
        {
            "location": "/references/#effective-potential",
            "text": "Spectrum of recoil nucleons in quasi-elastic neutrino nucleus interactions  C. Juszczak, J.A. Nowak, J.T. Sobczyk,  Eur.Phys.J. C39 (2005) 195-200",
            "title": "Effective potential"
        },
        {
            "location": "/references/#final-state-interactions",
            "text": "Final State Interactions Effects in Neutrino-Nucleus Interactions  T. Golan, C. Juszczak, J.T. Sobczyk,  Phys.Rev. C86 (2012) 015505",
            "title": "Final state interactions"
        },
        {
            "location": "/references/#resonance-pion-production",
            "text": "Simulations from a new neutrino event generator  C. Juszczak, J.A. Nowak, J.T. Sobczyk,  Nucl.Phys.Proc.Suppl. 159 (2006) 211-216    WroNG - Wroclaw Neutrino Generator of events for single pion production  J.T. Sobczyk, J.A. Nowak, K.M. Graczyk,  Nucl.Phys.Proc.Suppl. 139 (2005) 266-271    C(5) A axial form factor from bubble chamber experiments  K.M. Graczyk, D. Kielczewska, P. Przewlocki, J.T. Sobczyk,  Phys.Rev. D80 (2009) 093001    Investigation of recent weak single-pion production data  J.T. Sobczyk, J. \u017bmuda,  Phys.Rev. C91 (2015) no.4, 045501",
            "title": "Resonance pion production"
        },
        {
            "location": "/references/#deep-inelastic-scattering",
            "text": "Hadron production in Wroclaw neutrino event generator  J.A. Nowak, J.T. Sobczyk,  Acta Phys.Polon. B37 (2006) 2371-2378    NuWro: Monte Carlo generator of neutrino interactions  J. Sobczyk,  PoS NUFACT08 (2008) 141",
            "title": "Deep inelastic scattering"
        },
        {
            "location": "/references/#meson-exchange-current",
            "text": "Multinucleon ejection model for Meson Exchange Current neutrino interactions  J.T. Sobczyk,  Phys.Rev. C86 (2012) 015504    Extraction of Axial Mass and Strangeness Values from the MiniBooNE Neutral Current Elastic Cross Section Measurement  T. Golan, K.M. Graczyk, C. Juszczak, J.T. Sobczyk,  Phys.Rev. C88 (2013) 024612",
            "title": "Meson exchange current"
        },
        {
            "location": "/references/#ewro",
            "text": "NuWro Monte Carlo generator of neutrino interactions - first electron scattering results  J. \u017bmuda, K.M. Graczyk, C. Juszczak, J.T. Sobczyk,  Acta Phys.Polon. B46 (2015) no.11, 2329",
            "title": "eWro"
        }
    ]
}