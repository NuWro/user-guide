{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NuWro is a Monte Carlo neutrino event generator. It has been developed since 2006 at the University of Wroclaw. It includes all basic dynamics for neutrino scattering processes (for both neutral and charged currents): (quasi-) elastic scattering single pion production through Delta(1232) resonance (including non-resonant background) deep inelastic scattering (or in other words - more inelastic than Delta resonance) two-body current contribution to (quasi-) elastic scattering coherent pion production In the first three cases interactions occur on a single nucleon from a nucleus in the Impulse Approximation regime. Two-body current scattering goes beyond Impulse Approximation and neutrino interacts with at least two nucleons. Coherent pion production occurs on a whole nucleus. For all dynamics, but the coherent, the primary vertex is followed by final state interactions based on the intra-nuclear cascade model. NuWro provides a multiplicity of choices for a description of a target nucleus, including Fermi gas and spectral function. It also contains various parameterizations of nuclear form factors. Many quantum effects, like Pauli blocking or formation zone, are included. The generator has a detector geometry module and can handle realistic neutrino beams. All together makes NuWro a complete tool to use in neutrino experiments. This wiki describes technical aspect of using NuWro rather than physics implemented in the generator. For the latter please see the publication list . Credits Currently involved in the project: Jan Sobczyk Cezary Juszczak Tomasz Golan Kajetan Niewczas Krzysztof Graczyk Former members: Jaros\u0142aw Nowak Jakub \u017bmuda Significant contribution: Artur Kobyli\u0144ski Maciej Tabiszewski Pawe\u0142 Przew\u0142ocki Luke Pickering Patrick Stowell","title":"About"},{"location":"references/","text":"General Final State Interactions Effects in Neutrino-Nucleus Interactions T. Golan, C. Juszczak, J.T. Sobczyk, Phys.Rev. C86 (2012) 015505 Modeling nuclear effects in NuWro Monte Carlo neutrino event generator T. Golan, PhD theis Simulations from a new neutrino event generator C. Juszczak, J.A. Nowak, J.T. Sobczyk, Nucl.Phys.Proc.Suppl. 159 (2006) 211-216 NuWro: the Wroclaw Monte Carlo Generator of Neutrino Interactions T. Golan, J.T. Sobczyk, J. Zmuda, Nucl.Phys.Proc.Suppl. 229-232 (2012) 499 Models Spectral function On extraction of value of axial mass from MiniBooNE neutrino quasi-elastic double differential cross section data C. Juszczak, J.T. Sobczyk, J. Zmuda, Phys.Rev. C82 (2010) 045502 Construction of spectral functions for medium-mass nuclei A.M. Ankowski, J.T. Sobczyk, Phys.Rev. C77 (2008) 044311 Random phase approximation The Algebraic solution of RPA equations for the charged current quasielastic neutrino nucleus scattering K.M. Graczyk, J.T. Sobczyk, Eur.Phys.J. C31 (2003) 177-185 Effective potential Spectrum of recoil nucleons in quasi-elastic neutrino nucleus interactions C. Juszczak, J.A. Nowak, J.T. Sobczyk, Eur.Phys.J. C39 (2005) 195-200 Final state interactions Final State Interactions Effects in Neutrino-Nucleus Interactions T. Golan, C. Juszczak, J.T. Sobczyk, Phys.Rev. C86 (2012) 015505 Resonance pion production Simulations from a new neutrino event generator C. Juszczak, J.A. Nowak, J.T. Sobczyk, Nucl.Phys.Proc.Suppl. 159 (2006) 211-216 WroNG - Wroclaw Neutrino Generator of events for single pion production J.T. Sobczyk, J.A. Nowak, K.M. Graczyk, Nucl.Phys.Proc.Suppl. 139 (2005) 266-271 C(5) A axial form factor from bubble chamber experiments K.M. Graczyk, D. Kielczewska, P. Przewlocki, J.T. Sobczyk, Phys.Rev. D80 (2009) 093001 Investigation of recent weak single-pion production data J.T. Sobczyk, J. \u017bmuda, Phys.Rev. C91 (2015) no.4, 045501 Deep inelastic scattering Hadron production in Wroclaw neutrino event generator J.A. Nowak, J.T. Sobczyk, Acta Phys.Polon. B37 (2006) 2371-2378 NuWro: Monte Carlo generator of neutrino interactions J. Sobczyk, PoS NUFACT08 (2008) 141 Meson exchange current Multinucleon ejection model for Meson Exchange Current neutrino interactions J.T. Sobczyk, Phys.Rev. C86 (2012) 015504 Extraction of Axial Mass and Strangeness Values from the MiniBooNE Neutral Current Elastic Cross Section Measurement T. Golan, K.M. Graczyk, C. Juszczak, J.T. Sobczyk, Phys.Rev. C88 (2013) 024612 eWro NuWro Monte Carlo generator of neutrino interactions - first electron scattering results J. \u017bmuda, K.M. Graczyk, C. Juszczak, J.T. Sobczyk, Acta Phys.Polon. B46 (2015) no.11, 2329","title":"References"},{"location":"references/#general","text":"Final State Interactions Effects in Neutrino-Nucleus Interactions T. Golan, C. Juszczak, J.T. Sobczyk, Phys.Rev. C86 (2012) 015505 Modeling nuclear effects in NuWro Monte Carlo neutrino event generator T. Golan, PhD theis Simulations from a new neutrino event generator C. Juszczak, J.A. Nowak, J.T. Sobczyk, Nucl.Phys.Proc.Suppl. 159 (2006) 211-216 NuWro: the Wroclaw Monte Carlo Generator of Neutrino Interactions T. Golan, J.T. Sobczyk, J. Zmuda, Nucl.Phys.Proc.Suppl. 229-232 (2012) 499","title":"General"},{"location":"references/#models","text":"","title":"Models"},{"location":"references/#spectral-function","text":"On extraction of value of axial mass from MiniBooNE neutrino quasi-elastic double differential cross section data C. Juszczak, J.T. Sobczyk, J. Zmuda, Phys.Rev. C82 (2010) 045502 Construction of spectral functions for medium-mass nuclei A.M. Ankowski, J.T. Sobczyk, Phys.Rev. C77 (2008) 044311","title":"Spectral function"},{"location":"references/#random-phase-approximation","text":"The Algebraic solution of RPA equations for the charged current quasielastic neutrino nucleus scattering K.M. Graczyk, J.T. Sobczyk, Eur.Phys.J. C31 (2003) 177-185","title":"Random phase approximation"},{"location":"references/#effective-potential","text":"Spectrum of recoil nucleons in quasi-elastic neutrino nucleus interactions C. Juszczak, J.A. Nowak, J.T. Sobczyk, Eur.Phys.J. C39 (2005) 195-200","title":"Effective potential"},{"location":"references/#final-state-interactions","text":"Final State Interactions Effects in Neutrino-Nucleus Interactions T. Golan, C. Juszczak, J.T. Sobczyk, Phys.Rev. C86 (2012) 015505","title":"Final state interactions"},{"location":"references/#resonance-pion-production","text":"Simulations from a new neutrino event generator C. Juszczak, J.A. Nowak, J.T. Sobczyk, Nucl.Phys.Proc.Suppl. 159 (2006) 211-216 WroNG - Wroclaw Neutrino Generator of events for single pion production J.T. Sobczyk, J.A. Nowak, K.M. Graczyk, Nucl.Phys.Proc.Suppl. 139 (2005) 266-271 C(5) A axial form factor from bubble chamber experiments K.M. Graczyk, D. Kielczewska, P. Przewlocki, J.T. Sobczyk, Phys.Rev. D80 (2009) 093001 Investigation of recent weak single-pion production data J.T. Sobczyk, J. \u017bmuda, Phys.Rev. C91 (2015) no.4, 045501","title":"Resonance pion production"},{"location":"references/#deep-inelastic-scattering","text":"Hadron production in Wroclaw neutrino event generator J.A. Nowak, J.T. Sobczyk, Acta Phys.Polon. B37 (2006) 2371-2378 NuWro: Monte Carlo generator of neutrino interactions J. Sobczyk, PoS NUFACT08 (2008) 141","title":"Deep inelastic scattering"},{"location":"references/#meson-exchange-current","text":"Multinucleon ejection model for Meson Exchange Current neutrino interactions J.T. Sobczyk, Phys.Rev. C86 (2012) 015504 Extraction of Axial Mass and Strangeness Values from the MiniBooNE Neutral Current Elastic Cross Section Measurement T. Golan, K.M. Graczyk, C. Juszczak, J.T. Sobczyk, Phys.Rev. C88 (2013) 024612","title":"Meson exchange current"},{"location":"references/#ewro","text":"NuWro Monte Carlo generator of neutrino interactions - first electron scattering results J. \u017bmuda, K.M. Graczyk, C. Juszczak, J.T. Sobczyk, Acta Phys.Polon. B46 (2015) no.11, 2329","title":"eWro"},{"location":"singularity/","text":"Singularity containers are provided for all NuWro releases (starting from 17.09). The builds can be found in Singularity Hub . Each container includes base OS, ROOT with PYTHIA6 and NuWro (in /opt/ folder). For more information about Singularity please visit Singularity Used Guide . Getting a container One can easily get a Singularity container using singularity pull : $ singularity pull shub://NuWro/builds: [ release tag ] where tag = YY.MM (please make sure capitalization is correct - it is case sensitive), e.g. $ singularity pull shub://NuWro/builds:17.09 Downloaded image (by default) has the following name: [ user ] - [ repo ] - [ branch ] - [ tag ] .simg e.g. NuWro-builds-master-17.09.simg Information about software versions installed in a container is stored in its metadata. To check it use inspect , e.g. $ singularity inspect NuWro-builds-master-17.09.simg { MAINTAINER : tomasz.golan@gmail.com , NUWRO : 17.09 , ROOT : 5.34/36 , OS : Ubuntu14.04 , ... } Using a container Any application can be executed from a container using exec , e.g. to run NuWro with default parameters $ singularity exec NuWro-builds-master-17.09.simg nuwro Arguments can be passed as usual, e.g. $ singularity exec NuWro-builds-master-17.09.simg nuwro -i my_params.txt -o my_output.root In the same way one can run myroot to analyse the output, e.g. $ singularity exec NuWro-builds-master-17.09.simg myroot Also, NuWro containers are set up to run NuWro, by default: singularity run [ img file ] or . / [ img file ] are equivalent to singularity exec [img file] nuwro , e.g. ./NuWro-builds-master-17.09.simg -p beam_energy = 1234 would run NuWro with all deafult parameters but neutrino energy (equal 1234 MeV). Using ROOT5 container One can also use the container with preinstalled ROOT 5 and PYTHIA6 to compile and use NuWro from local drive. To get the container: $ singularity pull shub://NuWro/builds:root5 Start interactive shell: $ singularity shell NuWro-builds-master-root5.simg Go into NuWro folder (must be located somewhere in $HOME) cd /home/user/my/path/to/nuwro make ./bin/nuwro","title":"Singularity"},{"location":"singularity/#getting-a-container","text":"One can easily get a Singularity container using singularity pull : $ singularity pull shub://NuWro/builds: [ release tag ] where tag = YY.MM (please make sure capitalization is correct - it is case sensitive), e.g. $ singularity pull shub://NuWro/builds:17.09 Downloaded image (by default) has the following name: [ user ] - [ repo ] - [ branch ] - [ tag ] .simg e.g. NuWro-builds-master-17.09.simg Information about software versions installed in a container is stored in its metadata. To check it use inspect , e.g. $ singularity inspect NuWro-builds-master-17.09.simg { MAINTAINER : tomasz.golan@gmail.com , NUWRO : 17.09 , ROOT : 5.34/36 , OS : Ubuntu14.04 , ... }","title":"Getting a container"},{"location":"singularity/#using-a-container","text":"Any application can be executed from a container using exec , e.g. to run NuWro with default parameters $ singularity exec NuWro-builds-master-17.09.simg nuwro Arguments can be passed as usual, e.g. $ singularity exec NuWro-builds-master-17.09.simg nuwro -i my_params.txt -o my_output.root In the same way one can run myroot to analyse the output, e.g. $ singularity exec NuWro-builds-master-17.09.simg myroot Also, NuWro containers are set up to run NuWro, by default: singularity run [ img file ] or . / [ img file ] are equivalent to singularity exec [img file] nuwro , e.g. ./NuWro-builds-master-17.09.simg -p beam_energy = 1234 would run NuWro with all deafult parameters but neutrino energy (equal 1234 MeV).","title":"Using a container"},{"location":"singularity/#using-root5-container","text":"One can also use the container with preinstalled ROOT 5 and PYTHIA6 to compile and use NuWro from local drive. To get the container: $ singularity pull shub://NuWro/builds:root5 Start interactive shell: $ singularity shell NuWro-builds-master-root5.simg Go into NuWro folder (must be located somewhere in $HOME) cd /home/user/my/path/to/nuwro make ./bin/nuwro","title":"Using ROOT5 container"},{"location":"analyze-output/basics/","text":"Work in progress. Meanwhile, you can find more information in the tutorial . Event Generated events are represented by objects of class event : public TObject . They are saved in an output ROOT file under a TTree named \"treeout\" . Each event object stores all information about a single neutrino scattering process. This section describes informations you can extract from an event object. Note class event : public TObject provides many useful public variables and methods to use when analyze a ROOT output file. This section describes some of them. For the full list please refer to nuwro/src/event1.h . Flags event.flag stores the structure of the following flags: Flag True for qel (quasi-)elastic event res pion production event through resonance excitation dis deep inelastic scattering event mec two-body current event nc neutral current event cc charged current event Please note that RES channel is mainly pion production through Delta resonance, however, in general it is defined as inelastic events with invariant mass below 1.6 GeV. Everything above that value is marked as DIS channel. Vectors of particles There are three main std::vectors of particles: Vector Stores in initial state particles in primary vertex out final state particles in primary vertex post final state particles after final state interactions Note The convention is that a lepton is always first particle in a vector, so: in[0] - incoming neutrino out[0] - outgoing neutrino / charged lepton More information about particle class can be found in particle section . Particles multiplicities Although one can grab particles multiplicities directly from vectors, there are several methods to make it easier: Method Returns the number of final state particles int n(); after primary vertex int f(); after final state interactions int nof(int pdg); after primary vertex given by the PDG code int fof(int pdg); after final state interactions given by the PDG code Kinematics There are only few kinematics methods for an event (see particle section for more): Method Returns vect q(); four-momentum transfer (more on vect class ) double q2(); four-momentum transfer squared double W ();` invariant mass Please note default NuWro units is MeV. Final state interactions The following methods return the number of specific interaction type, happened during final state interactions: Method Returns the number of int number_of_nucleon_elastic(); nucleon elastic int number_of_nucleon_spp(); nucleon single pion production int number_of_nucleon_dpp(); nucleon double pion production int number_of_pion_elastic(); pion elastic int number_of_pion_ce(); pion charge exchange int number_of_pion_spp(); pion single pion production int number_of_pion_dpp(); pion double pion production int number_of_pion_tpp(); pion triple pion production int number_of_pion_abs(); pion absorption int number_of_interactions(); the sum of above Simulation settings event.par stores the copy of parameters used for a simulation. Please note, that some values may be different from event to event (e.g. target nucleus for detector simulations). Particle Events keep information about initial and final states particles in std::vector particle (as described here ). Usually, one has to loop over these vectors to extract information about final state particles. This section describes informations you can find in a particle class object. Note class particle : public vect provides many useful public variables and methods to use when analyze a ROOT output file. This section describes some of them. For the full list please refer to nuwro/src/particle.h . Selected methods Method Returns double E(); total energy double energy(); total energy double Ek(); kinetic energy double m(); mass double mass(); mass double mass2(); mass squared double momentum(); value of the momentum double momentum2(); momentum squared vec p(); momentum as a 3-vector vect p4(); four-momentum bool lepton(); true if lepton bool pion(); true if pion bool nucleon(); true if nucleon Please note default NuWro units is MeV. Selected variables Method Description int pdg; PDG code Vectors There are two classes for handling vectors: class vec : 3-vectors (x, y, z) class vect : 4-vectors (t, x, y, z) They both overload all reasonable operators, so vectors algebra is straightforward. Not much to say about it - they are vectors. If you feel like reading more on that please see nuwro/src/vec.h and nuwro/src/vect.h .","title":"Basics"},{"location":"analyze-output/basics/#event","text":"Generated events are represented by objects of class event : public TObject . They are saved in an output ROOT file under a TTree named \"treeout\" . Each event object stores all information about a single neutrino scattering process. This section describes informations you can extract from an event object. Note class event : public TObject provides many useful public variables and methods to use when analyze a ROOT output file. This section describes some of them. For the full list please refer to nuwro/src/event1.h .","title":"Event"},{"location":"analyze-output/basics/#flags","text":"event.flag stores the structure of the following flags: Flag True for qel (quasi-)elastic event res pion production event through resonance excitation dis deep inelastic scattering event mec two-body current event nc neutral current event cc charged current event Please note that RES channel is mainly pion production through Delta resonance, however, in general it is defined as inelastic events with invariant mass below 1.6 GeV. Everything above that value is marked as DIS channel.","title":"Flags"},{"location":"analyze-output/basics/#vectors-of-particles","text":"There are three main std::vectors of particles: Vector Stores in initial state particles in primary vertex out final state particles in primary vertex post final state particles after final state interactions Note The convention is that a lepton is always first particle in a vector, so: in[0] - incoming neutrino out[0] - outgoing neutrino / charged lepton More information about particle class can be found in particle section .","title":"Vectors of particles"},{"location":"analyze-output/basics/#particles-multiplicities","text":"Although one can grab particles multiplicities directly from vectors, there are several methods to make it easier: Method Returns the number of final state particles int n(); after primary vertex int f(); after final state interactions int nof(int pdg); after primary vertex given by the PDG code int fof(int pdg); after final state interactions given by the PDG code","title":"Particles multiplicities"},{"location":"analyze-output/basics/#kinematics","text":"There are only few kinematics methods for an event (see particle section for more): Method Returns vect q(); four-momentum transfer (more on vect class ) double q2(); four-momentum transfer squared double W ();` invariant mass Please note default NuWro units is MeV.","title":"Kinematics"},{"location":"analyze-output/basics/#final-state-interactions","text":"The following methods return the number of specific interaction type, happened during final state interactions: Method Returns the number of int number_of_nucleon_elastic(); nucleon elastic int number_of_nucleon_spp(); nucleon single pion production int number_of_nucleon_dpp(); nucleon double pion production int number_of_pion_elastic(); pion elastic int number_of_pion_ce(); pion charge exchange int number_of_pion_spp(); pion single pion production int number_of_pion_dpp(); pion double pion production int number_of_pion_tpp(); pion triple pion production int number_of_pion_abs(); pion absorption int number_of_interactions(); the sum of above","title":"Final state interactions"},{"location":"analyze-output/basics/#simulation-settings","text":"event.par stores the copy of parameters used for a simulation. Please note, that some values may be different from event to event (e.g. target nucleus for detector simulations).","title":"Simulation settings"},{"location":"analyze-output/basics/#particle","text":"Events keep information about initial and final states particles in std::vector particle (as described here ). Usually, one has to loop over these vectors to extract information about final state particles. This section describes informations you can find in a particle class object. Note class particle : public vect provides many useful public variables and methods to use when analyze a ROOT output file. This section describes some of them. For the full list please refer to nuwro/src/particle.h .","title":"Particle"},{"location":"analyze-output/basics/#selected-methods","text":"Method Returns double E(); total energy double energy(); total energy double Ek(); kinetic energy double m(); mass double mass(); mass double mass2(); mass squared double momentum(); value of the momentum double momentum2(); momentum squared vec p(); momentum as a 3-vector vect p4(); four-momentum bool lepton(); true if lepton bool pion(); true if pion bool nucleon(); true if nucleon Please note default NuWro units is MeV.","title":"Selected methods"},{"location":"analyze-output/basics/#selected-variables","text":"Method Description int pdg; PDG code","title":"Selected variables"},{"location":"analyze-output/basics/#vectors","text":"There are two classes for handling vectors: class vec : 3-vectors (x, y, z) class vect : 4-vectors (t, x, y, z) They both overload all reasonable operators, so vectors algebra is straightforward. Not much to say about it - they are vectors. If you feel like reading more on that please see nuwro/src/vec.h and nuwro/src/vect.h .","title":"Vectors"},{"location":"analyze-output/interactive/","text":"You can analyze NuWro output in the ROOT interactive mode. To use variables and methods described in basics section you need to load a proper dictionary. It is as simple as running ROOT through myroot located in nuwro/bin . Just type myroot if you have nuwro/bin added to your $PATH First you need to load a ROOT file and point to the right TTree : root [0] TFile* file = new TFile ( /path/to/output.root ) root [1] TTree* tree = (TTree*)file- gt;Get( treeout ) You can easily draw any distribution for variables described in basics section using Draw function. Example To draw Q2 distribution simply type: root [2] tree- gt;Draw( -q2() ) which access event- q2() . Example To draw target nucleon ( in[1] ) momentum distribution: root [3] tree- gt;Draw( in[1].momentum() ) which access event- particle- momentum() . Example To draw outgoing lepton momentum z component: root [4] tree- gt;Draw( out[0].p().z ) which access event- particle- vec- z . Example You can add cuts by providing boolean expression as a second argument of Draw function: root [5] tree- gt;Draw( -q2() , out[0].Ek() gt; 500 ) which draws Q2 distribution for events with outgoing lepton kinetic energy above 500 MeV.","title":"Interactive mode"},{"location":"analyze-output/macros/","text":"There are some basic examples of using the interactive ROOT mode to extract informations from a NuWro output file in the previous section . Usually, what you really want is to have a ROOT macro to do that. This section contains some examples of how to prepare them to work with events generated by NuWro. You can find ROOT documentation here Preparing a sample For the examples in this section the following sample was generated: beam: muon neutrino with energy = 1 GeV target: Carbon channels: all CC no. of events: 1 000 000 using the following command: nuwro -i numu_1gev_carbon_cc.txt -o numu_1gev_carbon_cc.root with the following numu_1gev_carbon_cc.txt settings file: #################### # General settings # #################### number_of_events = 1000000 // the number of events to generate ################# # Beam settings # ################# beam_type = 0 // single-flavor beam beam_particle = 14 // muon neutrino beam_energy = 1000 // mono-energetic beam (1000 MeV) ################### # Target settings # ################### @ target / C . txt // Carbon ######################### # Interactions settings # ######################### dyn_qel_cc = 1 // charged current quasi-elastic dyn_qel_nc = 0 // neutral current elastic dyn_res_cc = 1 // charged current resonant pion production dyn_res_nc = 0 // neutral current resonant pion production dyn_dis_cc = 1 // charged current deep inelastic scattering dyn_dis_nc = 0 // neutral current deep inelastic scattering dyn_coh_cc = 1 // charged current coherent pion production dyn_coh_nc = 0 // neutral current coherent pion production dyn_mec_cc = 1 // charged current 2p2 dyn_mec_nc = 0 // neutral current 2p2h ########################################## # Interactions settings: (quasi-)elastic # ########################################## qel_cc_axial_mass = 1030 // axial mass [MeV] ########################################### # Interactions settings: two-body current # ########################################### mec_kind = 3 // Nieves et al. model Note You can see that numu_1gev_carbon_cc.txt does not include all parameters (like e.g. nuwro/data/params.txt settings file example). For all parameters which were not provided in a settings file NuWro will use default values as described here . Basic plots Histograms created by Draw In the previous section you can find some basic examples for using the Draw function to make plots, e.g. tree- gt;Draw( -q2() ) The Draw function can be also used to create ROOT histograms, e.g. tree- gt;Draw( -q2() gt; gt; my_histogram ) will draw the histogram but also save it in TH1F *my_histogram . Pretty handy. You may want to use Draw to create TH1 objects w/o actually drawing them. Well, just turn g raphics off : tree- gt;Draw( -q2() gt; gt; my_histogram , , goff ); Having said that, take a look at the following macro ( basic_plots.c ): void basic_plots ( char * filename ) { ///// LOAD FILE AND TTREE ///// TFile * file = new TFile ( filename ); TTree * tree = ( TTree * ) file - Get ( treeout ); ///// CREATE HISTOGRAMS ///// // Q2 distribution tree - Draw ( -q2() q2 , , goff ); // Q2 distribution only for QEL events tree - Draw ( -q2() q2_qel_true , flag.qel , goff ); // Q2 distribution for events w/o any pion in the final state tree - Draw ( -q2() q2_qel_like , fof(211) + fof(111) + fof(-211) == 0 , goff ); // Q2 distribution for non-QEL events w/o any pion in the final state tree - Draw ( -q2() q2_bkg , !flag- qel fof(211) + fof(111) + fof(-211) == 0 , goff ); ///// HISTOGRAM SETTINGS ///// q2 - SetLineColor ( kBlack ); q2 - SetTitle ( #nu_{#mu} on Carbon, E_{#nu} = 1 GeV ); q2 - SetXTitle ( Q^{2} [MeV^{2}] ); q2_qel_true - SetLineColor ( kBlue ); q2_qel_like - SetLineColor ( kGreen ); q2_bkg - SetLineColor ( kRed ); ///// SAVE HISTOGRAMS ///// // first you need a canvas TCanvas * c = new TCanvas ; q2 - Draw (); q2_qel_true - Draw ( same ); // same - on the same plot q2_qel_like - Draw ( same ); q2_bkg - Draw ( same ); c - Print ( numu_1gev_carbon_cc.q2.svg ); } At the beginning a file is loaded and a right tree is pointed. Get used to it as every of your scripts is going to start like this. Histograms are created using Draw function (as explained above): Draw ( what gt; gt; histogram , [conditions] , [graphics off] ) Setting up labels, colors etc. are not worth to discuss here - it is not ROOT tutorial after all. Please see ROOT documentation for more informations. Instead of using default c1 canvas we create our own. Now, every histogram- Draw() call will be put on the canvas. Please note, that if \"same\" option is not used, current content of the canvas will be overwritten. Finally, Print function is used to save the plot to SVG file. Please note, that the main function in the macro has the same name as the macro file. It makes it easy to run the macro directly from the command line: myroot -b -q basic_plots.c( numu_1gev_carbon_cc.root ) -b stands for batch mode (w/o graphics) and -q is to exit ROOT after job is done. This call is equivalent to: $ myroot -b root [ 0 ] .L basic_plots.c root [ 1 ] basic_plots ( numu_1gev_carbon_cc.root ) root [ 2 ] .q The final plot (\"numu_1gev_carbon_cc.q2.svg\"): Histograms created by hand","title":"ROOT macros"},{"location":"analyze-output/macros/#preparing-a-sample","text":"For the examples in this section the following sample was generated: beam: muon neutrino with energy = 1 GeV target: Carbon channels: all CC no. of events: 1 000 000 using the following command: nuwro -i numu_1gev_carbon_cc.txt -o numu_1gev_carbon_cc.root with the following numu_1gev_carbon_cc.txt settings file: #################### # General settings # #################### number_of_events = 1000000 // the number of events to generate ################# # Beam settings # ################# beam_type = 0 // single-flavor beam beam_particle = 14 // muon neutrino beam_energy = 1000 // mono-energetic beam (1000 MeV) ################### # Target settings # ################### @ target / C . txt // Carbon ######################### # Interactions settings # ######################### dyn_qel_cc = 1 // charged current quasi-elastic dyn_qel_nc = 0 // neutral current elastic dyn_res_cc = 1 // charged current resonant pion production dyn_res_nc = 0 // neutral current resonant pion production dyn_dis_cc = 1 // charged current deep inelastic scattering dyn_dis_nc = 0 // neutral current deep inelastic scattering dyn_coh_cc = 1 // charged current coherent pion production dyn_coh_nc = 0 // neutral current coherent pion production dyn_mec_cc = 1 // charged current 2p2 dyn_mec_nc = 0 // neutral current 2p2h ########################################## # Interactions settings: (quasi-)elastic # ########################################## qel_cc_axial_mass = 1030 // axial mass [MeV] ########################################### # Interactions settings: two-body current # ########################################### mec_kind = 3 // Nieves et al. model Note You can see that numu_1gev_carbon_cc.txt does not include all parameters (like e.g. nuwro/data/params.txt settings file example). For all parameters which were not provided in a settings file NuWro will use default values as described here .","title":"Preparing a sample"},{"location":"analyze-output/macros/#basic-plots","text":"","title":"Basic plots"},{"location":"analyze-output/macros/#histograms-created-by-draw","text":"In the previous section you can find some basic examples for using the Draw function to make plots, e.g. tree- gt;Draw( -q2() ) The Draw function can be also used to create ROOT histograms, e.g. tree- gt;Draw( -q2() gt; gt; my_histogram ) will draw the histogram but also save it in TH1F *my_histogram . Pretty handy. You may want to use Draw to create TH1 objects w/o actually drawing them. Well, just turn g raphics off : tree- gt;Draw( -q2() gt; gt; my_histogram , , goff ); Having said that, take a look at the following macro ( basic_plots.c ): void basic_plots ( char * filename ) { ///// LOAD FILE AND TTREE ///// TFile * file = new TFile ( filename ); TTree * tree = ( TTree * ) file - Get ( treeout ); ///// CREATE HISTOGRAMS ///// // Q2 distribution tree - Draw ( -q2() q2 , , goff ); // Q2 distribution only for QEL events tree - Draw ( -q2() q2_qel_true , flag.qel , goff ); // Q2 distribution for events w/o any pion in the final state tree - Draw ( -q2() q2_qel_like , fof(211) + fof(111) + fof(-211) == 0 , goff ); // Q2 distribution for non-QEL events w/o any pion in the final state tree - Draw ( -q2() q2_bkg , !flag- qel fof(211) + fof(111) + fof(-211) == 0 , goff ); ///// HISTOGRAM SETTINGS ///// q2 - SetLineColor ( kBlack ); q2 - SetTitle ( #nu_{#mu} on Carbon, E_{#nu} = 1 GeV ); q2 - SetXTitle ( Q^{2} [MeV^{2}] ); q2_qel_true - SetLineColor ( kBlue ); q2_qel_like - SetLineColor ( kGreen ); q2_bkg - SetLineColor ( kRed ); ///// SAVE HISTOGRAMS ///// // first you need a canvas TCanvas * c = new TCanvas ; q2 - Draw (); q2_qel_true - Draw ( same ); // same - on the same plot q2_qel_like - Draw ( same ); q2_bkg - Draw ( same ); c - Print ( numu_1gev_carbon_cc.q2.svg ); } At the beginning a file is loaded and a right tree is pointed. Get used to it as every of your scripts is going to start like this. Histograms are created using Draw function (as explained above): Draw ( what gt; gt; histogram , [conditions] , [graphics off] ) Setting up labels, colors etc. are not worth to discuss here - it is not ROOT tutorial after all. Please see ROOT documentation for more informations. Instead of using default c1 canvas we create our own. Now, every histogram- Draw() call will be put on the canvas. Please note, that if \"same\" option is not used, current content of the canvas will be overwritten. Finally, Print function is used to save the plot to SVG file. Please note, that the main function in the macro has the same name as the macro file. It makes it easy to run the macro directly from the command line: myroot -b -q basic_plots.c( numu_1gev_carbon_cc.root ) -b stands for batch mode (w/o graphics) and -q is to exit ROOT after job is done. This call is equivalent to: $ myroot -b root [ 0 ] .L basic_plots.c root [ 1 ] basic_plots ( numu_1gev_carbon_cc.root ) root [ 2 ] .q The final plot (\"numu_1gev_carbon_cc.q2.svg\"):","title":"Histograms created by Draw"},{"location":"analyze-output/macros/#histograms-created-by-hand","text":"","title":"Histograms created by hand"},{"location":"getting-started/installation/","text":"Getting NuWro To get the most up to date version of NuWro use: git clone https://github.com/NuWro/nuwro.git To get one of the stable releases use: git clone -b [ release tag ] https://github.com/NuWro/nuwro.git e.g. git clone -b nuwro_17.01 https://github.com/NuWro/nuwro.git git version older than 1.7.10 git clone -b [release tag] will not work for git older than 1.7.10 (but it is from May 2012 so you may consider updating your system). To get specific release you can use git checkout tags/[release tag] , e.g. git clone https://github.com/NuWro/nuwro.git git checkout tags/nuwro_17.01 Dependencies ROOT PYTHIA6 Building ROOT with PYTHIA6 support download ROOT source code make sure you have all ROOT dependencies installed download PYTHIA6 source code build PYTHIA6 shared object ( libPythia6.so ): tar -xzvf pythia6.tar.gz cd pythia6 ./makePythia6.linux It requires gfortran Fortran compiler. copy libPythia6.so to root/lib folder: tar -zxvf root_v*.source.tar.gz mkdir root/lib cp pythia6/libPythia6.so root/lib configure ROOT: cd root ./configure --with-pythia6-libdir = lib and make it: make For ROOT version 6.16.00 you can try out the following script : #make temporary directory for downloading sources mkdir ~/install cd ~/install #dowload pythia6 sources wget https://root.cern.ch/download/pythia6.tar.gz tar xzf pythia6.tar.gz cd pythia6 #modify ./makePythia6.linux to use gfortran in place of g77 sed -i s/g77/gfortran/g ./makePythia6.linux #make libPythia6.so bash ./makePythia6.linux #download ROOT sources cd ~/install wget https://root.cern/download/root_v6.16.00.source.tar.gz tar zxf root_v6.16.00.source.tar.gz #create build directory mkdir ~/root cd ~/root mkdir ~/root/lib #copy pythia6 library to build directory cp ~/install/pythia6/libPythia6.so ~/root/lib #cmake ROOT with PYTHIA6 enabled cmake -DPYTHIA6_LIBRARY = ~/root/lib/libPythia6.so -Dpyhia6 = ON ~/install/root-6.16.00 #make it make -j4 set environmental variables: export ROOTSYS =( path to root directory ) export PATH = $PATH : $ROOTSYS /bin export LD_LIBRARY_PATH = $LD_LIBRARY_PATH : $ROOTSYS /lib you can use the script provided by ROOT ( bin/this_root.sh ) that includes the commands and run source bin/this_root.sh every time you start a terminal or add the above lines to either ~/.bashrc or ~/.bash_profile . macOS support NuWro has been tested to work properly on the following configuration x86_64-apple-darwin15.6.0 clang-800.0.42.1 root-5.34.36 While installing on macOS one should remember about the following differences: PYTHIA6 should be compiled using the ./makePythia6.macosx64 command, the shared object of PYTHIA6 is called libPythia6.dylib , the bash profile file is called ~/.profile . Note that the following problems are known to emerge: NuWro has not yet been configured to work with ROOT6 under macOS, while installing gfortran via Homebrew the libgfortran.dylib file is not properly linked for the C compiler, one should export the variable LIBRARY_PATH with the path to the lib file. e.g. put into ~/.profile the following line (it will depend on the gfortran installation) export LIBRARY_PATH=/usr/local/lib/gcc/6 Building NuWro Once you have ROOT installed with PYTHIA6 support just make NuWro: tar -zxvf nuwro-*.tar.gz cd nuwro make Troubleshooting If you have troubles to compile ROOT with gcc5 compiler and getting errors about undefined references to std::__cxx11 (described here ), you can add the following flag: -D_GLIBCXX_USE_CXX11_ABI = 0 to CFLAGS in proper [root]/config/Makefile.[system] file.","title":"Installation"},{"location":"getting-started/installation/#getting-nuwro","text":"To get the most up to date version of NuWro use: git clone https://github.com/NuWro/nuwro.git To get one of the stable releases use: git clone -b [ release tag ] https://github.com/NuWro/nuwro.git e.g. git clone -b nuwro_17.01 https://github.com/NuWro/nuwro.git git version older than 1.7.10 git clone -b [release tag] will not work for git older than 1.7.10 (but it is from May 2012 so you may consider updating your system). To get specific release you can use git checkout tags/[release tag] , e.g. git clone https://github.com/NuWro/nuwro.git git checkout tags/nuwro_17.01","title":"Getting NuWro"},{"location":"getting-started/installation/#dependencies","text":"ROOT PYTHIA6","title":"Dependencies"},{"location":"getting-started/installation/#building-root-with-pythia6-support","text":"download ROOT source code make sure you have all ROOT dependencies installed download PYTHIA6 source code build PYTHIA6 shared object ( libPythia6.so ): tar -xzvf pythia6.tar.gz cd pythia6 ./makePythia6.linux It requires gfortran Fortran compiler. copy libPythia6.so to root/lib folder: tar -zxvf root_v*.source.tar.gz mkdir root/lib cp pythia6/libPythia6.so root/lib configure ROOT: cd root ./configure --with-pythia6-libdir = lib and make it: make For ROOT version 6.16.00 you can try out the following script : #make temporary directory for downloading sources mkdir ~/install cd ~/install #dowload pythia6 sources wget https://root.cern.ch/download/pythia6.tar.gz tar xzf pythia6.tar.gz cd pythia6 #modify ./makePythia6.linux to use gfortran in place of g77 sed -i s/g77/gfortran/g ./makePythia6.linux #make libPythia6.so bash ./makePythia6.linux #download ROOT sources cd ~/install wget https://root.cern/download/root_v6.16.00.source.tar.gz tar zxf root_v6.16.00.source.tar.gz #create build directory mkdir ~/root cd ~/root mkdir ~/root/lib #copy pythia6 library to build directory cp ~/install/pythia6/libPythia6.so ~/root/lib #cmake ROOT with PYTHIA6 enabled cmake -DPYTHIA6_LIBRARY = ~/root/lib/libPythia6.so -Dpyhia6 = ON ~/install/root-6.16.00 #make it make -j4 set environmental variables: export ROOTSYS =( path to root directory ) export PATH = $PATH : $ROOTSYS /bin export LD_LIBRARY_PATH = $LD_LIBRARY_PATH : $ROOTSYS /lib you can use the script provided by ROOT ( bin/this_root.sh ) that includes the commands and run source bin/this_root.sh every time you start a terminal or add the above lines to either ~/.bashrc or ~/.bash_profile . macOS support NuWro has been tested to work properly on the following configuration x86_64-apple-darwin15.6.0 clang-800.0.42.1 root-5.34.36 While installing on macOS one should remember about the following differences: PYTHIA6 should be compiled using the ./makePythia6.macosx64 command, the shared object of PYTHIA6 is called libPythia6.dylib , the bash profile file is called ~/.profile . Note that the following problems are known to emerge: NuWro has not yet been configured to work with ROOT6 under macOS, while installing gfortran via Homebrew the libgfortran.dylib file is not properly linked for the C compiler, one should export the variable LIBRARY_PATH with the path to the lib file. e.g. put into ~/.profile the following line (it will depend on the gfortran installation) export LIBRARY_PATH=/usr/local/lib/gcc/6","title":"Building ROOT with PYTHIA6 support"},{"location":"getting-started/installation/#building-nuwro","text":"Once you have ROOT installed with PYTHIA6 support just make NuWro: tar -zxvf nuwro-*.tar.gz cd nuwro make","title":"Building NuWro"},{"location":"getting-started/installation/#troubleshooting","text":"If you have troubles to compile ROOT with gcc5 compiler and getting errors about undefined references to std::__cxx11 (described here ), you can add the following flag: -D_GLIBCXX_USE_CXX11_ABI = 0 to CFLAGS in proper [root]/config/Makefile.[system] file.","title":"Troubleshooting"},{"location":"getting-started/parameters/","text":"NuWro uses by default settings from the params.txt file located in $PWD directory. If the file does not exist, the one from nuwro/data folder is loaded. If both files are missing or some of the parameters are not set in the file, default values are used. General settings Parameter name Possible arguments Default value Description number_of_events positive integer 1e5 The number of equally weighted events to be saved in the output ROOT file number_of_test_events positive integer 1e6 The number of events used to calculate cross sections (not saved by default) user_events 0, 1 0 Used to turn on the fitting procedure: 0 - Run NuWro 1 - Fit axial mass to MiniBooNE data for CCQE user_params (for user_events 1) x y z - Parameters for the axial mass extraction procedure: x - the minimum axial mass value y - the maximum axial mass value z - the axial mass step random_seed positive integer 0 Controls the random seed persistence: 0 - use time(NULL) as a seed for the random number generator 1 - read state from \u201crandom seed\u201d file or use seed=time(NULL), if the file was not found n - use n as the seed for the random number generator mixed_order 0, 1 0 If 1, events are saved to the output file in random order save_test_events 0-2 0 Turn on to use test events in the analysis: 0 - test events are not saved 1 - test events are finalized and stored in weight.eventsout.root file, the average weight is equal to the total cross section 2 - test events of nonzero weights are finalized and stored in weight.eventsout.root file, the weights are respectively scaled, so the average weight is equal to the total cross section Beam settings Parameter name Possible arguments Default value Description beam_direction x y z 0 0 1 The direction of the neutrino momentum in xyz coordinates beam_type 0-4 0 Types of beams: 0 - a single neutrino flavor beam 1 - a mixed flavor beam 2 - a beam loaded from a ROOT file 3 - a beam loaded from the histogram (histout.txt) 4 - create histout.txt file based on a ROOT file (than use beam type 3 to run NuWro) beam_particle (for beam_type 0) +/- 12, 14, 16 14 PDG number of the incident neutrino beam_energy (for beam_type 0) explained below 1000 The energy profile beam_content (for beam_type 1) explained below - The mixed beam definition beam_folder (for beam_type 2, 4) path ../flux The path to the directory with ROOT files beam_file_first (for beam_type 2, 4) positive integer 1 The number of the first file in the folder to be read beam_file_limit (for beam_type 2, 4) positive integer 0 The number of files to be loaded (0 - read files to the last one in the directory) beam_offset x y z 0 0 0 The offset of the position of the interaction in xyz coordinates beam_placement (in cascade mode only) 0-2 0 The starting position of the particle: 0 - the propagation starts at the center of the nucleus 1 - the propagation starts at a random place inside the nucleus 2 - the propagation starts just under the surface of the nucleus Defining energy profile for a single flavor beam For a single flavor neutrino beam you need to set up beam_type = 0 and specify neutrino PDG using beam_particle = [PDG code] . The energy profile is set using beam_energy : for a mono-energetic beam use: beam_energy = E where E is neutrino energy in MeV for a uniform beam with energy range from E0 to E1 use: beam_energy = E0 E1 for a non-uniform beam with energy range from E0 to E1 given by histogram a1, a2, ..., an use: beam_energy = E0 E1 a0 a1 ... an Hint The histogram does not have to be normalized. The probability of finding neutrino energy in i-th bin is defined as follows: P_i = \\frac{a_i}{\\sum\\limits_{i=0}^n a_j} P_i = \\frac{a_i}{\\sum\\limits_{i=0}^n a_j} Example The following code: beam_energy = 1000 2000 1 2 3 4 defines the following beam: ^ | | |-----| | | | | |-----| | | | | | | |-----| | 40% | | | | 30% | | | |-----| 20% | | | | | 10% | | | | |-----|-----|-----|-----|-----|----- gt; E [MeV] 1000 1250 1500 1750 2000 Defining energy profile for a mixed flavor beam For a mixed flavor neutrino beam you need to set up beam_type = 1 . Instead of using beam_particle and beam_energy you should define a beam with: beam_content = [ PDG code ] [ fraction ] % [ beam energy ] where [beam energy] is defined as for a single flavor beam. Example The following code: beam_content = 14 80% 1000 defines mono-energetic muon neutrino beam, which constitutes 80% of the whole flux. You may add as many beam contents as you want in the following way: beam_content += [ PDG code ] [ fraction ] % [ beam energy ] Please note += . Using = would clear the previous content. In general, a mixed flavor beam definition would look like this: beam_content = [PDG code 1] [fraction 1]% [beam energy 1] beam_content += [PDG code 2] [fraction 2]% [beam energy 2] beam_content += [PDG code 3] [fraction 3]% [beam energy 3] ... Example The following code: beam content = 12 75% 1000 beam content += -12 20% 1000 2000 beam content += 14 5% 1000 1500 1 5 10 15 5 1 defines the following beam: 75% of mono-energetic electron neutrinos 20% of electron anti-neutrinos with uniformly distributed energy 5% of muon neutrinos with some energy distribution in range 1-1.5 GeV Predefined beams One can also use predefined beam specifications instead of the above parameters. The list of beams can be found in nuwro/data/beam directory. To use one of those beams, one must use the following line: @beam/beamfile.txt where beamfile.txt is the name of the file from nuwro/data/beam directory. Target settings Parameter name Possible arguments Default value Description target_type 0-2 0 Types of targets: 0 - a single nucleus 1 - a target composed from some nuclei 2 - a detector geometry loaded from a ROOT file nucleus_p (for target_type 0) positive integer 6 The number of protons in a target nucleus nucleus_n (for target_type 0) positive integer 6 The number of neutrons in a target nucleus nucleus_E_b (for target_type 0) positive integer 34 The binding potential (sum of binding and Fermi energies) nucleus_kf (for target_type 0) positive integer 220 The Fermi momentum nucleus_target 0-5 2 Nucleus models used in a primary interaction: 0 - free nucleon 1 - Fermi gas 2 - local Fermi gas 3 - Bodek-Ritchie model 4 - spectral function 5 - deuterium nucleus_model 0, 1 1 Nucleus density profiles for FSI: 0 - constant density 1 - realistic density profile target_content (for target_type 1) explained below - The composed target definition geo_file (for target_type 2) filename target/ND280v9r7p5.root The path to the file with the detector geometry geo_name (for target_type 2) geometry name ND280Geometry v9r7p5 The name of the geometry in the file geo_o (for target_type 2) x y z 0 0 0 The coordinates of the center of the box geo_d (for target_type 2) x y z 2000 5000 2000 The half dimension of the box geo_volumne (for target_type 2) master volume name - The name of the master volume in the detector file Defining a single nucleus target In order to define a single nucleus target you need to set up target_type = 0 . Then, define the number of nucleons using: nucleus_p = [#protons] nucleus_n = [#neutrons] You may set up other nucleus properties using parameters listed in the table above. Example To define Carbon target use: target_type = 0 nucleus_p = 6 nucleus_n = 6 Defining a composed target In order to define a multi-nuclei target you need to set up target_type = 1 . Instead of using nucleus_p , nucleus_n and other nucleus related parameters you should define your target with: target_content = [ # protons ] [ # neutrons ] [ # nuclei ] x [ binding energy ] [ Fermi momentum ] [ nucleus target ] where only first three arguments are required. When using local Fermi gas model binding energy and Fermi momentum are taken from tables anyway. You may add as many nuclei as you want in the following way: target_content += [ # protons ] [ # neutrons ] [ # nuclei ] x [ binding energy ] [ Fermi momentum ] [ nucleus target ] Please note += . Using = would clear the previous content. In general, a multi-nuclei target definition would look like this: target_content = [#protons 1] [#neutrons 1] [#nuclei 1] x target_content += [#protons 2] [#neutrons 2] [#nuclei 2] x target_content += [#protons 3] [#neutrons 3] [#nuclei 3] x Example To define C_2H_6O C_2H_6O use the following code: target_type = 1 target content = 6 6 2 x target content += 1 0 6 x target content += 8 8 1 x Predefined targets One can also use predefined target specifications instead of the above parameters. The list of targets can be found in nuwro/data/target directory. To use one of those beams, one must use the following line: @target/targetfile.txt where targetfile.txt is the name of the file from nuwro/data/target directory. Please note that many predefined targets use slightly different syntax for composed targets. The syntax without space after [#nuclei] will not work on MacOS. Interactions settings Parameter name Possible arguments Default value Description dyn_qel_cc 0, 1 1 Turn on/off charge current quasielastic process dyn_qel_nc 0, 1 1 Turn on/off neutral current quasielastic process dyn_res_cc 0, 1 1 Turn on/off charge current resonance pion production dyn_res_nc 0, 1 1 Turn on/off neutral current resonance pion production dyn_dis_cc 0, 1 1 Turn on/off charge current deep inelastic scattering dyn_dis_nc 0, 1 1 Turn on/off neutral current deep inelastic scattering dyn_coh_cc 0, 1 1 Turn on/off charge current coherent pion production dyn_coh_nc 0, 1 1 Turn on/off neutral current coherent pion production dyn_mec_cc 0, 1 1 Turn on/off charge current meson exchange current process dyn_mec_nc 0, 1 1 Turn on/off neutral current meson exchange current process Quasi-elastic Parameter name Possible arguments Default value Description qel_vector_ff_set 1-6 2 Electromagnetic form factors parametrization: 1 - dipole form 2 - BBBA05 (Ref. [1]) 3 - BBA03 (Ref. [2]) 4 - JLab (Ref. [3]) 5 - NN10 with two photon exchange effect (Ref. [4]) qel_axial_ff_set 1-4 1 Axial form factors parametrization: 1 - dipole form 2 - 2-fold parabolic modification 3 - 3-fold parabolic modification 4 - 4-fold parabolic modification qel_strange 0, 1 0 Turn on/off the strange quark contribution to the NC axial form factors qel_strangeEM 0, 1 0 Turn on/off the strange quark contribution to the NC vector form factors delta_s any number -0.15 Strangeness contribution qel_cc_axial_mass positive number 1200 The axial mass value for charge current form factors qel_nc_axial_mass positive number 1350 The axial mass value for neutral current form factors qel_s_axial_mass positive number 1200 The axial mass value used in the dipole strange form factor qel_rpa 0-3 0 RPA settings: 0 - do not use RPA 1 - use RPA without effective mass of nucleon 2 - use effective mass of nucleon without RPA (test only) 3 - use RPA with effective mass of nucleon (test only) flux_correction 0, 1 1 Turn on/off flux correction sf_method 0-3 0 Spectral function settings (for CCQE): 0 - do not use spectral function 1 - use grid spectral function (for 12C, 16O, 40Ar, 40Ca, 56Fe) 2 - use factorized spectral function (for 16O, 40Ar, 40Ca) cc_smoothing 0, 1 1 If 1, the impossible quasi-elastic reaction (like CC nu scattering off proton) are skipped Pion production Parameter name Possible arguments Default value Description delta_FF_set 1-7 1 Delta production form factors: 1 - dipole form [5] 2 - Paschos and Lalakulich, 2.12 MA = 1.05GeV BNL fit (Ref. [6]) 3 - Paschos and Lalakulich, 2.12 MA = 0.84GeV ANL fit (Ref. [6]) 4 - Paschos and Lalakulich, page 4, bottom right (Ref. [6]) 5 - Paschos and Lalakulich, page 5, top left (Ref. [6]) 6 - Eq. 13 from Ref. [7] 7 - based on chiral quark model from Ref. [8] pion_axial_mass (for delta_FF_set 1) positive number 0.94 The axial mass value used in dipole parametrization of the resonance pion production form factor pion_C5A (for delta_FF_set 1) positive number 1.19 The C5A value used in dipole parametrization of the resonance pion production form factor spp_precision positive number 500 Controls the precision in RESDIS boundary region; should not be changed red_dis_cut positive number 1600 Boundary of RES-DIS transition; should not be changed coh_mass_correction 0, 1 1 Turn on/off Rein Sehgal correction to charge current coherent pion production coh_new 0, 1 1 Change between old (0) and improved (1) implementation of coherent pion production Two-body current Parameter name Possible arguments Default value Description mec_kind 1-4 1 Two-body current models: 1 - Transverse Enhancement model (Ref. [9]) 2 - based on Marteau model (Ref. [10, 12]) 3 - Nieves et al. model (Ref. [11]) mec_ratio_pp [0,1] 0.6 The fraction of mixed initial nucleon pairs for charge current interaction. For neutral current the fraction is calculated as 1/(2*mec ratio pp + 1) Final state interactions Parameter name Possible arguments Default value Description kaskada_on 0, 1 1 Turn on (1) / off (0) final state interactions kaskada_w positive number 7 The value of the effective potential subtracted from the nucleons energy leaving the nucleus kaskada_redo 0, 1 0 If on, given output file ( eventsout.root by default) is loaded, the primary vertex is copied and only final state interactions are simulated. New output file with .fsi.root suffix is created kaskada_writeall 0, 1 0 If on, all particles created during final state interactions are saved in all vector step positive number 0.2 Length of max step in the cascade in fm xsec 0, 1 1 Cross section models for pion-nucleon interactions: 0 - based on Ref. [13] 1 - based on Ref. [14] pauli_blocking 0, 1 1 Turn on/off Pauli blocking formation_length (for formation_zone const) positive number 1 Formation length in fm tau positive number 8 The parameter control the formation length for ranft and rl models first_step 0, 1 0 If off, the formation zone is applied only for the particles created during final state interactions formation_zone explained below fz explained below Formation zone models nofz : formation zone is off skat8 : SKAT parametrization (Ref. [15]) cosyn : parametrization based on Color Transparency measurements (Ref. [16]) cohl : coherence length (Ref. [17]) ranft : parametrization based on hadron-hadron and hadron-nucleus collision (Ref. [18]) rl : as ranft but with fixed transverse momentum equal zero delta : for resonance pion production; based on \u2206 lifetime (Ref. [19]) const : constant value (defined by formation_length ) fz (default): cohl for quasi-elastic scattering delta for resonance pion production ranft for deep inelastic scattering nofz for meson exchange current trans : only for nuclear transparency analysis References [1] R. Bradford et al. \u201cA New parameterization of the nucleon elastic form-factors\u201d. Nucl.Phys.Proc.Suppl. 159 (2006), pp. 127\u2013132. [2] Howard Scott Budd, A. Bodek, and J. Arrington. \u201cModeling quasielastic form-factors for electron and neutrino scattering\u201d . arXiv: hep-ex/0308005 (2003). [3] E.J. Brash et al. \u201cNew empirical fits to the proton electromagnetic form-factors\u201d. Phys.Rev. C65 (2002), p. 051001. [4] Krzysztof M. Graczyk, Piotr Plonski, and Robert Sulej. \u201cNeural Network Parameterizations of Electromagnetic Nucleon Form Factors\u201d. JHEP. 1009 (2010), p. 053. [5] K.M. Graczyk, D. Kielczewska, P. Przewlocki, and J.T. Sobczyk. \"C(5)**A axial form factor from bubble chamber experiments\". Phys.Rev. D80 (2009) 093001 [6] Olga Lalakulich and Emmanuel A. Paschos. \u201cResonance production by neutrinos. I. J = 3/2 resonances\u201d. Phys.Rev. D71 (2005), p. 074003. [7] L. Alvarez-Ruso, S. K. Singh, and M. J. Vicente Vacas. \u201cCharged current weak electroproduction of the \u2206 resonance\u201d. Phys. Rev. C. 57 (5 1998), pp. 2693\u20132699. [8] D. Barquilla-Cano, A.J. Buchmann, and E. Hernandez. \u201cAxial N-\u00bfDelta(1232) and N-\u00bfN*(1440) transition form factors\u201d. Phys.Rev. C75 (2007), p. 065203. [9] A. Bodek, H.S. Budd, and M.E. Christy. \u201cNeutrino Quasielastic Scattering on Nuclear Targets: Parametrizing Transverse Enhancement (Meson Exchange Currents)\u201d. Eur.Phys.J. C71 (2011), p. 1726. [10] Jan T. Sobczyk. \u201cModeling nuclear effects in neutrino interactions in 1-GeV region\u201d . arXiv: nucl-th/0307047 (2003). [11] J. Nieves, I. Ruiz Simo, and M. J. Vicente Vacas. \u201cInclusive charged-current neutrino-nucleus reactions\u201d. Phys. Rev. C. 83 (4 2011), p. 045501. [12] M. Martini et al. \u201cUnified approach for nucleon knock-out and coherent and incoherent pion production in neutrino interactions with nuclei\u201d. Phys. Rev. C. 80 (6 2009), p. 065501. [13] N. Metropolis et al. \u201cMonte Carlo Calculations on Intranuclear Cascades. I. Low-Energy Studies\u201d. Phys.Rev. 110 (1958), pp. 185\u2013203. [14] L.L. Salcedo et al. \u201cComputer simulation of inclusive pion nuclear reactions\u201d. Nucl.Phys. A484 (1988), p. 557. [15] D.S. Baranov et al. \u201cAn estimate for the formation length of hadrons in neutrino interactions\u201d (1984). [16] Wim Cosyn. \u201cExploring the limits of a hadronic picture of nuclei through pion and nucleon removal reactions\u201d. PhD thesis. Ghent University, 2009. url: http://lib.ugent.be/fulltxt/RUG01/001/350/817/RUG01-001350817/_2010/_0001/_AC.pdf1 [17] A. Rubbia G. Battistoni A. Ferrari and P.R. Sala. The FLUKA nuclear cascade model applied to neutrino interactions. talk given at NuInt02. 2002. [18] J. Ranft. \u201cHadron production in hadron-nucleus and nucleus-nucleus collisions in a dual parton model modified by a formation zone intranuclear cascade\u201d. Zeitschrift f\u00a8ur Physik C Particles and Fields. 43.3 (1989), pp. 439\u2013446. [19] Tomasz Golan, Cezary Juszczak, and Jan T. Sobczyk. \u201cFinal State Interactions Effects in Neutrino-Nucleus Interactions\u201d. Phys.Rev. C86 (2012), p. 015505.","title":"Parameters list"},{"location":"getting-started/parameters/#general-settings","text":"Parameter name Possible arguments Default value Description number_of_events positive integer 1e5 The number of equally weighted events to be saved in the output ROOT file number_of_test_events positive integer 1e6 The number of events used to calculate cross sections (not saved by default) user_events 0, 1 0 Used to turn on the fitting procedure: 0 - Run NuWro 1 - Fit axial mass to MiniBooNE data for CCQE user_params (for user_events 1) x y z - Parameters for the axial mass extraction procedure: x - the minimum axial mass value y - the maximum axial mass value z - the axial mass step random_seed positive integer 0 Controls the random seed persistence: 0 - use time(NULL) as a seed for the random number generator 1 - read state from \u201crandom seed\u201d file or use seed=time(NULL), if the file was not found n - use n as the seed for the random number generator mixed_order 0, 1 0 If 1, events are saved to the output file in random order save_test_events 0-2 0 Turn on to use test events in the analysis: 0 - test events are not saved 1 - test events are finalized and stored in weight.eventsout.root file, the average weight is equal to the total cross section 2 - test events of nonzero weights are finalized and stored in weight.eventsout.root file, the weights are respectively scaled, so the average weight is equal to the total cross section","title":"General settings"},{"location":"getting-started/parameters/#beam-settings","text":"Parameter name Possible arguments Default value Description beam_direction x y z 0 0 1 The direction of the neutrino momentum in xyz coordinates beam_type 0-4 0 Types of beams: 0 - a single neutrino flavor beam 1 - a mixed flavor beam 2 - a beam loaded from a ROOT file 3 - a beam loaded from the histogram (histout.txt) 4 - create histout.txt file based on a ROOT file (than use beam type 3 to run NuWro) beam_particle (for beam_type 0) +/- 12, 14, 16 14 PDG number of the incident neutrino beam_energy (for beam_type 0) explained below 1000 The energy profile beam_content (for beam_type 1) explained below - The mixed beam definition beam_folder (for beam_type 2, 4) path ../flux The path to the directory with ROOT files beam_file_first (for beam_type 2, 4) positive integer 1 The number of the first file in the folder to be read beam_file_limit (for beam_type 2, 4) positive integer 0 The number of files to be loaded (0 - read files to the last one in the directory) beam_offset x y z 0 0 0 The offset of the position of the interaction in xyz coordinates beam_placement (in cascade mode only) 0-2 0 The starting position of the particle: 0 - the propagation starts at the center of the nucleus 1 - the propagation starts at a random place inside the nucleus 2 - the propagation starts just under the surface of the nucleus","title":"Beam settings"},{"location":"getting-started/parameters/#defining-energy-profile-for-a-single-flavor-beam","text":"For a single flavor neutrino beam you need to set up beam_type = 0 and specify neutrino PDG using beam_particle = [PDG code] . The energy profile is set using beam_energy : for a mono-energetic beam use: beam_energy = E where E is neutrino energy in MeV for a uniform beam with energy range from E0 to E1 use: beam_energy = E0 E1 for a non-uniform beam with energy range from E0 to E1 given by histogram a1, a2, ..., an use: beam_energy = E0 E1 a0 a1 ... an Hint The histogram does not have to be normalized. The probability of finding neutrino energy in i-th bin is defined as follows: P_i = \\frac{a_i}{\\sum\\limits_{i=0}^n a_j} P_i = \\frac{a_i}{\\sum\\limits_{i=0}^n a_j} Example The following code: beam_energy = 1000 2000 1 2 3 4 defines the following beam: ^ | | |-----| | | | | |-----| | | | | | | |-----| | 40% | | | | 30% | | | |-----| 20% | | | | | 10% | | | | |-----|-----|-----|-----|-----|----- gt; E [MeV] 1000 1250 1500 1750 2000","title":"Defining energy profile for a single flavor beam"},{"location":"getting-started/parameters/#defining-energy-profile-for-a-mixed-flavor-beam","text":"For a mixed flavor neutrino beam you need to set up beam_type = 1 . Instead of using beam_particle and beam_energy you should define a beam with: beam_content = [ PDG code ] [ fraction ] % [ beam energy ] where [beam energy] is defined as for a single flavor beam. Example The following code: beam_content = 14 80% 1000 defines mono-energetic muon neutrino beam, which constitutes 80% of the whole flux. You may add as many beam contents as you want in the following way: beam_content += [ PDG code ] [ fraction ] % [ beam energy ] Please note += . Using = would clear the previous content. In general, a mixed flavor beam definition would look like this: beam_content = [PDG code 1] [fraction 1]% [beam energy 1] beam_content += [PDG code 2] [fraction 2]% [beam energy 2] beam_content += [PDG code 3] [fraction 3]% [beam energy 3] ... Example The following code: beam content = 12 75% 1000 beam content += -12 20% 1000 2000 beam content += 14 5% 1000 1500 1 5 10 15 5 1 defines the following beam: 75% of mono-energetic electron neutrinos 20% of electron anti-neutrinos with uniformly distributed energy 5% of muon neutrinos with some energy distribution in range 1-1.5 GeV","title":"Defining energy profile for a mixed flavor beam"},{"location":"getting-started/parameters/#predefined-beams","text":"One can also use predefined beam specifications instead of the above parameters. The list of beams can be found in nuwro/data/beam directory. To use one of those beams, one must use the following line: @beam/beamfile.txt where beamfile.txt is the name of the file from nuwro/data/beam directory.","title":"Predefined beams"},{"location":"getting-started/parameters/#target-settings","text":"Parameter name Possible arguments Default value Description target_type 0-2 0 Types of targets: 0 - a single nucleus 1 - a target composed from some nuclei 2 - a detector geometry loaded from a ROOT file nucleus_p (for target_type 0) positive integer 6 The number of protons in a target nucleus nucleus_n (for target_type 0) positive integer 6 The number of neutrons in a target nucleus nucleus_E_b (for target_type 0) positive integer 34 The binding potential (sum of binding and Fermi energies) nucleus_kf (for target_type 0) positive integer 220 The Fermi momentum nucleus_target 0-5 2 Nucleus models used in a primary interaction: 0 - free nucleon 1 - Fermi gas 2 - local Fermi gas 3 - Bodek-Ritchie model 4 - spectral function 5 - deuterium nucleus_model 0, 1 1 Nucleus density profiles for FSI: 0 - constant density 1 - realistic density profile target_content (for target_type 1) explained below - The composed target definition geo_file (for target_type 2) filename target/ND280v9r7p5.root The path to the file with the detector geometry geo_name (for target_type 2) geometry name ND280Geometry v9r7p5 The name of the geometry in the file geo_o (for target_type 2) x y z 0 0 0 The coordinates of the center of the box geo_d (for target_type 2) x y z 2000 5000 2000 The half dimension of the box geo_volumne (for target_type 2) master volume name - The name of the master volume in the detector file","title":"Target settings"},{"location":"getting-started/parameters/#defining-a-single-nucleus-target","text":"In order to define a single nucleus target you need to set up target_type = 0 . Then, define the number of nucleons using: nucleus_p = [#protons] nucleus_n = [#neutrons] You may set up other nucleus properties using parameters listed in the table above. Example To define Carbon target use: target_type = 0 nucleus_p = 6 nucleus_n = 6","title":"Defining a single nucleus target"},{"location":"getting-started/parameters/#defining-a-composed-target","text":"In order to define a multi-nuclei target you need to set up target_type = 1 . Instead of using nucleus_p , nucleus_n and other nucleus related parameters you should define your target with: target_content = [ # protons ] [ # neutrons ] [ # nuclei ] x [ binding energy ] [ Fermi momentum ] [ nucleus target ] where only first three arguments are required. When using local Fermi gas model binding energy and Fermi momentum are taken from tables anyway. You may add as many nuclei as you want in the following way: target_content += [ # protons ] [ # neutrons ] [ # nuclei ] x [ binding energy ] [ Fermi momentum ] [ nucleus target ] Please note += . Using = would clear the previous content. In general, a multi-nuclei target definition would look like this: target_content = [#protons 1] [#neutrons 1] [#nuclei 1] x target_content += [#protons 2] [#neutrons 2] [#nuclei 2] x target_content += [#protons 3] [#neutrons 3] [#nuclei 3] x Example To define C_2H_6O C_2H_6O use the following code: target_type = 1 target content = 6 6 2 x target content += 1 0 6 x target content += 8 8 1 x","title":"Defining a composed target"},{"location":"getting-started/parameters/#predefined-targets","text":"One can also use predefined target specifications instead of the above parameters. The list of targets can be found in nuwro/data/target directory. To use one of those beams, one must use the following line: @target/targetfile.txt where targetfile.txt is the name of the file from nuwro/data/target directory. Please note that many predefined targets use slightly different syntax for composed targets. The syntax without space after [#nuclei] will not work on MacOS.","title":"Predefined targets"},{"location":"getting-started/parameters/#interactions-settings","text":"Parameter name Possible arguments Default value Description dyn_qel_cc 0, 1 1 Turn on/off charge current quasielastic process dyn_qel_nc 0, 1 1 Turn on/off neutral current quasielastic process dyn_res_cc 0, 1 1 Turn on/off charge current resonance pion production dyn_res_nc 0, 1 1 Turn on/off neutral current resonance pion production dyn_dis_cc 0, 1 1 Turn on/off charge current deep inelastic scattering dyn_dis_nc 0, 1 1 Turn on/off neutral current deep inelastic scattering dyn_coh_cc 0, 1 1 Turn on/off charge current coherent pion production dyn_coh_nc 0, 1 1 Turn on/off neutral current coherent pion production dyn_mec_cc 0, 1 1 Turn on/off charge current meson exchange current process dyn_mec_nc 0, 1 1 Turn on/off neutral current meson exchange current process","title":"Interactions settings"},{"location":"getting-started/parameters/#quasi-elastic","text":"Parameter name Possible arguments Default value Description qel_vector_ff_set 1-6 2 Electromagnetic form factors parametrization: 1 - dipole form 2 - BBBA05 (Ref. [1]) 3 - BBA03 (Ref. [2]) 4 - JLab (Ref. [3]) 5 - NN10 with two photon exchange effect (Ref. [4]) qel_axial_ff_set 1-4 1 Axial form factors parametrization: 1 - dipole form 2 - 2-fold parabolic modification 3 - 3-fold parabolic modification 4 - 4-fold parabolic modification qel_strange 0, 1 0 Turn on/off the strange quark contribution to the NC axial form factors qel_strangeEM 0, 1 0 Turn on/off the strange quark contribution to the NC vector form factors delta_s any number -0.15 Strangeness contribution qel_cc_axial_mass positive number 1200 The axial mass value for charge current form factors qel_nc_axial_mass positive number 1350 The axial mass value for neutral current form factors qel_s_axial_mass positive number 1200 The axial mass value used in the dipole strange form factor qel_rpa 0-3 0 RPA settings: 0 - do not use RPA 1 - use RPA without effective mass of nucleon 2 - use effective mass of nucleon without RPA (test only) 3 - use RPA with effective mass of nucleon (test only) flux_correction 0, 1 1 Turn on/off flux correction sf_method 0-3 0 Spectral function settings (for CCQE): 0 - do not use spectral function 1 - use grid spectral function (for 12C, 16O, 40Ar, 40Ca, 56Fe) 2 - use factorized spectral function (for 16O, 40Ar, 40Ca) cc_smoothing 0, 1 1 If 1, the impossible quasi-elastic reaction (like CC nu scattering off proton) are skipped","title":"Quasi-elastic"},{"location":"getting-started/parameters/#pion-production","text":"Parameter name Possible arguments Default value Description delta_FF_set 1-7 1 Delta production form factors: 1 - dipole form [5] 2 - Paschos and Lalakulich, 2.12 MA = 1.05GeV BNL fit (Ref. [6]) 3 - Paschos and Lalakulich, 2.12 MA = 0.84GeV ANL fit (Ref. [6]) 4 - Paschos and Lalakulich, page 4, bottom right (Ref. [6]) 5 - Paschos and Lalakulich, page 5, top left (Ref. [6]) 6 - Eq. 13 from Ref. [7] 7 - based on chiral quark model from Ref. [8] pion_axial_mass (for delta_FF_set 1) positive number 0.94 The axial mass value used in dipole parametrization of the resonance pion production form factor pion_C5A (for delta_FF_set 1) positive number 1.19 The C5A value used in dipole parametrization of the resonance pion production form factor spp_precision positive number 500 Controls the precision in RESDIS boundary region; should not be changed red_dis_cut positive number 1600 Boundary of RES-DIS transition; should not be changed coh_mass_correction 0, 1 1 Turn on/off Rein Sehgal correction to charge current coherent pion production coh_new 0, 1 1 Change between old (0) and improved (1) implementation of coherent pion production","title":"Pion production"},{"location":"getting-started/parameters/#two-body-current","text":"Parameter name Possible arguments Default value Description mec_kind 1-4 1 Two-body current models: 1 - Transverse Enhancement model (Ref. [9]) 2 - based on Marteau model (Ref. [10, 12]) 3 - Nieves et al. model (Ref. [11]) mec_ratio_pp [0,1] 0.6 The fraction of mixed initial nucleon pairs for charge current interaction. For neutral current the fraction is calculated as 1/(2*mec ratio pp + 1)","title":"Two-body current"},{"location":"getting-started/parameters/#final-state-interactions","text":"Parameter name Possible arguments Default value Description kaskada_on 0, 1 1 Turn on (1) / off (0) final state interactions kaskada_w positive number 7 The value of the effective potential subtracted from the nucleons energy leaving the nucleus kaskada_redo 0, 1 0 If on, given output file ( eventsout.root by default) is loaded, the primary vertex is copied and only final state interactions are simulated. New output file with .fsi.root suffix is created kaskada_writeall 0, 1 0 If on, all particles created during final state interactions are saved in all vector step positive number 0.2 Length of max step in the cascade in fm xsec 0, 1 1 Cross section models for pion-nucleon interactions: 0 - based on Ref. [13] 1 - based on Ref. [14] pauli_blocking 0, 1 1 Turn on/off Pauli blocking formation_length (for formation_zone const) positive number 1 Formation length in fm tau positive number 8 The parameter control the formation length for ranft and rl models first_step 0, 1 0 If off, the formation zone is applied only for the particles created during final state interactions formation_zone explained below fz explained below","title":"Final state interactions"},{"location":"getting-started/parameters/#formation-zone-models","text":"nofz : formation zone is off skat8 : SKAT parametrization (Ref. [15]) cosyn : parametrization based on Color Transparency measurements (Ref. [16]) cohl : coherence length (Ref. [17]) ranft : parametrization based on hadron-hadron and hadron-nucleus collision (Ref. [18]) rl : as ranft but with fixed transverse momentum equal zero delta : for resonance pion production; based on \u2206 lifetime (Ref. [19]) const : constant value (defined by formation_length ) fz (default): cohl for quasi-elastic scattering delta for resonance pion production ranft for deep inelastic scattering nofz for meson exchange current trans : only for nuclear transparency analysis","title":"Formation zone models"},{"location":"getting-started/parameters/#references","text":"[1] R. Bradford et al. \u201cA New parameterization of the nucleon elastic form-factors\u201d. Nucl.Phys.Proc.Suppl. 159 (2006), pp. 127\u2013132. [2] Howard Scott Budd, A. Bodek, and J. Arrington. \u201cModeling quasielastic form-factors for electron and neutrino scattering\u201d . arXiv: hep-ex/0308005 (2003). [3] E.J. Brash et al. \u201cNew empirical fits to the proton electromagnetic form-factors\u201d. Phys.Rev. C65 (2002), p. 051001. [4] Krzysztof M. Graczyk, Piotr Plonski, and Robert Sulej. \u201cNeural Network Parameterizations of Electromagnetic Nucleon Form Factors\u201d. JHEP. 1009 (2010), p. 053. [5] K.M. Graczyk, D. Kielczewska, P. Przewlocki, and J.T. Sobczyk. \"C(5)**A axial form factor from bubble chamber experiments\". Phys.Rev. D80 (2009) 093001 [6] Olga Lalakulich and Emmanuel A. Paschos. \u201cResonance production by neutrinos. I. J = 3/2 resonances\u201d. Phys.Rev. D71 (2005), p. 074003. [7] L. Alvarez-Ruso, S. K. Singh, and M. J. Vicente Vacas. \u201cCharged current weak electroproduction of the \u2206 resonance\u201d. Phys. Rev. C. 57 (5 1998), pp. 2693\u20132699. [8] D. Barquilla-Cano, A.J. Buchmann, and E. Hernandez. \u201cAxial N-\u00bfDelta(1232) and N-\u00bfN*(1440) transition form factors\u201d. Phys.Rev. C75 (2007), p. 065203. [9] A. Bodek, H.S. Budd, and M.E. Christy. \u201cNeutrino Quasielastic Scattering on Nuclear Targets: Parametrizing Transverse Enhancement (Meson Exchange Currents)\u201d. Eur.Phys.J. C71 (2011), p. 1726. [10] Jan T. Sobczyk. \u201cModeling nuclear effects in neutrino interactions in 1-GeV region\u201d . arXiv: nucl-th/0307047 (2003). [11] J. Nieves, I. Ruiz Simo, and M. J. Vicente Vacas. \u201cInclusive charged-current neutrino-nucleus reactions\u201d. Phys. Rev. C. 83 (4 2011), p. 045501. [12] M. Martini et al. \u201cUnified approach for nucleon knock-out and coherent and incoherent pion production in neutrino interactions with nuclei\u201d. Phys. Rev. C. 80 (6 2009), p. 065501. [13] N. Metropolis et al. \u201cMonte Carlo Calculations on Intranuclear Cascades. I. Low-Energy Studies\u201d. Phys.Rev. 110 (1958), pp. 185\u2013203. [14] L.L. Salcedo et al. \u201cComputer simulation of inclusive pion nuclear reactions\u201d. Nucl.Phys. A484 (1988), p. 557. [15] D.S. Baranov et al. \u201cAn estimate for the formation length of hadrons in neutrino interactions\u201d (1984). [16] Wim Cosyn. \u201cExploring the limits of a hadronic picture of nuclei through pion and nucleon removal reactions\u201d. PhD thesis. Ghent University, 2009. url: http://lib.ugent.be/fulltxt/RUG01/001/350/817/RUG01-001350817/_2010/_0001/_AC.pdf1 [17] A. Rubbia G. Battistoni A. Ferrari and P.R. Sala. The FLUKA nuclear cascade model applied to neutrino interactions. talk given at NuInt02. 2002. [18] J. Ranft. \u201cHadron production in hadron-nucleus and nucleus-nucleus collisions in a dual parton model modified by a formation zone intranuclear cascade\u201d. Zeitschrift f\u00a8ur Physik C Particles and Fields. 43.3 (1989), pp. 439\u2013446. [19] Tomasz Golan, Cezary Juszczak, and Jan T. Sobczyk. \u201cFinal State Interactions Effects in Neutrino-Nucleus Interactions\u201d. Phys.Rev. C86 (2012), p. 015505.","title":"References"},{"location":"getting-started/running/","text":"Basics After a successful installation you will find nuwro executable in nuwro/bin folder. Hint You can run NuWro providing the path to nuwro or you can add nuwro/bin to $PATH by adding the following line to your ~/.bashrc : export PATH=(path to nuwro)/bin:$PATH NuWro does not require any command line arguments, although there are several optional arguments: -o to provide the path for output files -i to provide the path to an input file with simulation settings -p to change a single simulation parameter w.r.t to the input file (this one can be use multiple times) In general, the command to run NuWro would look like this: nuwro [-o output root file] \\ [-i input parameters file] \\ [-p parameter name 1 = value 1 ] \\ [-p parameter name 2 = value 2 ] \\ ... [-p parameter name N = value N ] When running RES and DIS channel you will see many PYTHIA warnings about catching an infinite loop - just ignore them. Input The path to a simulation settings file can be provided with -i option. Note If the path to a simulation settings file is not provided: $PWD/params.txt will be used or nuwro/data/params.txt will be used or hard-coded default settings will be used. The example settings file can be found in nuwro/data/params.txt . It is recommended to copy this file to the working directory and modify as needed. The list of available settings can be found in parameters section . Example Copy default settings files to your working directory: cp /path/to/nuwro/data/params.txt . modify as needed and run NuWro: nuwro Note: If nuwro/bin is not in $PATH you need to provide the full path. Example Copy default settings files: cp /path/to/nuwro/data/params.txt /some/path/my_params.txt modify as needed and run NuWro providing the path to my_params.txt : nuwro -i /some/path/my_params.txt Parameters from a settings file can be modified using -p option. It is useful if you need to perform several simulations with only small changes to settings. Example Let /some/path/my_params.txt be you base configuration. The following bash script: 1 2 3 4 5 6 7 #!/bin/sh for Ma in $( seq 1000 100 1300 ) do nuwro -i /some/path/my_params.txt \\ -o my_output_ $Ma .root \\ -p qel_cc_axial_mass = $Ma done will perform 4 simulations with the same settings but axial mass. Output NuWro produces three output files: $PWD/eventsout.root with an events tree $PWD/eventsout.root.txt with flux-integrated cross sections $PWD/eventsout.root.par with parameters used for the simulation The output path can be changed with -o option. Example The following command: nuwro -o /path/to/simulation.root will produce the following output files: /path/to/simulation.root /path/to/simulation.root.txt /path/to/simulation.root.par The instruction on how to work with NuWro output files can be found here . Examples The list of all available settings (as well as instruction on how to define beam and target) can be found in parameters section . This section is just to demonstrate basic usage. CCQE on Carbon We want to perform the following simulation: muon neutrino mono-energetic beam 1 GeV target = Carbon only CCQE dynamics Lets start with grabbing the default settings file, which we are going to modify for our needs: cp /path/to/nuwro/data/params.txt ccqe_carbon.txt 1. Setting the beam Locate \"Beam specification\" section and make sure that all beam related settings are commented (including includes @beam/... ). Add the following lines to define the beam: beam_type = 0 beam_particle = 14 beam_energy = 1000 2. Setting the target Locate \"Target specification\" section and make sure that all target related settings are commented (including includes @target/... ). Add the following lines to define the target: target_type = 0 nucleus_p = 6 nucleus_n = 6 Predefined targets Instead of defining target by hand it is possible to use predefined targets from nuwro/data/target/ folder. In this case simply add: @target/C.txt 3. Setting dynamics Locate the following lines: dyn_qel_cc = 1 // Quasi elastic charged current dyn_qel_nc = 0 // Quasi elastic neutral current dyn_res_cc = 0 // Resonant charged current dyn_res_nc = 0 // Resonant neutral current dyn_dis_cc = 0 // Deep inelastic charged current dyn_dis_nc = 0 // Deep inelastic neutral current dyn_coh_cc = 0 // Coherent charged current dyn_coh_nc = 0 // Coherent neutral current dyn_mec_cc = 0 // Meson exchange charged current dyn_mec_nc = 0 // Meson exchange neutral current and modify according to your needs. In this case disable all dynamics but CCQE. 4. Running simulation If the ccqe_carbon.txt settings file is ready simply run: nuwro -i ccqe_carbon.txt -o ccqe_carbon.root Comparing nucleus models We want to compare three nucleus models implemented in NuWro: (global) Fermi gas (with fixed Fermi level) local Fermi gas (with Fermi level dependent on density) spectral function Lets consider the NuMi neutrino beam and CH target for all CC channels. We need to perform three simulation, but they all may share the base settings file: cp /path/to/nuwro/data/params.txt numi_cc_ch.txt 1. Setting beam and target Make sure that all other beam and target settings (\"Beam specification\" and \"Target specification\") are commented. Then add the following lines to numi_cc_ch.txt : @beam/NuMi_nu_100_10000.txt # predefined beam from nuwro/data/beam/ target_type = 1 # composed target target_content = 6 6 1x # 1 x Carbon target_content += 1 0 1x # 1 x Hydrogen 2. Setting dynamics Locate the following lines: dyn_qel_cc = 1 // Quasi elastic charged current dyn_qel_nc = 0 // Quasi elastic neutral current dyn_res_cc = 1 // Resonant charged current dyn_res_nc = 0 // Resonant neutral current dyn_dis_cc = 1 // Deep inelastic charged current dyn_dis_nc = 0 // Deep inelastic neutral current dyn_coh_cc = 1 // Coherent charged current dyn_coh_nc = 0 // Coherent neutral current dyn_mec_cc = 1 // Meson exchange charged current dyn_mec_nc = 0 // Meson exchange neutral current and modify according to your needs. In this case turn on only CC interactions. 3. Running simulations As we are going to change only nucleus model we may use the same base settings file for all three simulations. For (global) Fermi gas you have to set nucleus_target = 1 and you may want to make sure that spectral function is disabled ( sf_method ): nuwro -i numi_cc_ch.txt \\ -p nucleus_target = 1 \\ -p sf_method = 0 \\ -o numi_cc_ch_gfg.root In the similar way you can perform the simulation for local Fermi gas: nuwro -i numi_cc_ch.txt \\ -p nucleus_target = 2 \\ -p sf_method = 0 \\ -o numi_cc_ch_lfg.root and for spectral function: nuwro -i numi_cc_ch.txt \\ -p nucleus_target = 2 \\ -p sf_method = 1 \\ -o numi_cc_ch_sf.root Spectral function is applied only for (quasi-)elastic dynamics. For others the model set by nucleus_target is used.","title":"Running NuWro"},{"location":"getting-started/running/#basics","text":"After a successful installation you will find nuwro executable in nuwro/bin folder. Hint You can run NuWro providing the path to nuwro or you can add nuwro/bin to $PATH by adding the following line to your ~/.bashrc : export PATH=(path to nuwro)/bin:$PATH NuWro does not require any command line arguments, although there are several optional arguments: -o to provide the path for output files -i to provide the path to an input file with simulation settings -p to change a single simulation parameter w.r.t to the input file (this one can be use multiple times) In general, the command to run NuWro would look like this: nuwro [-o output root file] \\ [-i input parameters file] \\ [-p parameter name 1 = value 1 ] \\ [-p parameter name 2 = value 2 ] \\ ... [-p parameter name N = value N ] When running RES and DIS channel you will see many PYTHIA warnings about catching an infinite loop - just ignore them.","title":"Basics"},{"location":"getting-started/running/#input","text":"The path to a simulation settings file can be provided with -i option. Note If the path to a simulation settings file is not provided: $PWD/params.txt will be used or nuwro/data/params.txt will be used or hard-coded default settings will be used. The example settings file can be found in nuwro/data/params.txt . It is recommended to copy this file to the working directory and modify as needed. The list of available settings can be found in parameters section . Example Copy default settings files to your working directory: cp /path/to/nuwro/data/params.txt . modify as needed and run NuWro: nuwro Note: If nuwro/bin is not in $PATH you need to provide the full path. Example Copy default settings files: cp /path/to/nuwro/data/params.txt /some/path/my_params.txt modify as needed and run NuWro providing the path to my_params.txt : nuwro -i /some/path/my_params.txt Parameters from a settings file can be modified using -p option. It is useful if you need to perform several simulations with only small changes to settings. Example Let /some/path/my_params.txt be you base configuration. The following bash script: 1 2 3 4 5 6 7 #!/bin/sh for Ma in $( seq 1000 100 1300 ) do nuwro -i /some/path/my_params.txt \\ -o my_output_ $Ma .root \\ -p qel_cc_axial_mass = $Ma done will perform 4 simulations with the same settings but axial mass.","title":"Input"},{"location":"getting-started/running/#output","text":"NuWro produces three output files: $PWD/eventsout.root with an events tree $PWD/eventsout.root.txt with flux-integrated cross sections $PWD/eventsout.root.par with parameters used for the simulation The output path can be changed with -o option. Example The following command: nuwro -o /path/to/simulation.root will produce the following output files: /path/to/simulation.root /path/to/simulation.root.txt /path/to/simulation.root.par The instruction on how to work with NuWro output files can be found here .","title":"Output"},{"location":"getting-started/running/#examples","text":"The list of all available settings (as well as instruction on how to define beam and target) can be found in parameters section . This section is just to demonstrate basic usage.","title":"Examples"},{"location":"getting-started/running/#ccqe-on-carbon","text":"We want to perform the following simulation: muon neutrino mono-energetic beam 1 GeV target = Carbon only CCQE dynamics Lets start with grabbing the default settings file, which we are going to modify for our needs: cp /path/to/nuwro/data/params.txt ccqe_carbon.txt","title":"CCQE on Carbon"},{"location":"getting-started/running/#1-setting-the-beam","text":"Locate \"Beam specification\" section and make sure that all beam related settings are commented (including includes @beam/... ). Add the following lines to define the beam: beam_type = 0 beam_particle = 14 beam_energy = 1000","title":"1. Setting the beam"},{"location":"getting-started/running/#2-setting-the-target","text":"Locate \"Target specification\" section and make sure that all target related settings are commented (including includes @target/... ). Add the following lines to define the target: target_type = 0 nucleus_p = 6 nucleus_n = 6 Predefined targets Instead of defining target by hand it is possible to use predefined targets from nuwro/data/target/ folder. In this case simply add: @target/C.txt","title":"2. Setting the target"},{"location":"getting-started/running/#3-setting-dynamics","text":"Locate the following lines: dyn_qel_cc = 1 // Quasi elastic charged current dyn_qel_nc = 0 // Quasi elastic neutral current dyn_res_cc = 0 // Resonant charged current dyn_res_nc = 0 // Resonant neutral current dyn_dis_cc = 0 // Deep inelastic charged current dyn_dis_nc = 0 // Deep inelastic neutral current dyn_coh_cc = 0 // Coherent charged current dyn_coh_nc = 0 // Coherent neutral current dyn_mec_cc = 0 // Meson exchange charged current dyn_mec_nc = 0 // Meson exchange neutral current and modify according to your needs. In this case disable all dynamics but CCQE.","title":"3. Setting dynamics"},{"location":"getting-started/running/#4-running-simulation","text":"If the ccqe_carbon.txt settings file is ready simply run: nuwro -i ccqe_carbon.txt -o ccqe_carbon.root","title":"4. Running simulation"},{"location":"getting-started/running/#comparing-nucleus-models","text":"We want to compare three nucleus models implemented in NuWro: (global) Fermi gas (with fixed Fermi level) local Fermi gas (with Fermi level dependent on density) spectral function Lets consider the NuMi neutrino beam and CH target for all CC channels. We need to perform three simulation, but they all may share the base settings file: cp /path/to/nuwro/data/params.txt numi_cc_ch.txt","title":"Comparing nucleus models"},{"location":"getting-started/running/#1-setting-beam-and-target","text":"Make sure that all other beam and target settings (\"Beam specification\" and \"Target specification\") are commented. Then add the following lines to numi_cc_ch.txt : @beam/NuMi_nu_100_10000.txt # predefined beam from nuwro/data/beam/ target_type = 1 # composed target target_content = 6 6 1x # 1 x Carbon target_content += 1 0 1x # 1 x Hydrogen","title":"1. Setting beam and target"},{"location":"getting-started/running/#2-setting-dynamics","text":"Locate the following lines: dyn_qel_cc = 1 // Quasi elastic charged current dyn_qel_nc = 0 // Quasi elastic neutral current dyn_res_cc = 1 // Resonant charged current dyn_res_nc = 0 // Resonant neutral current dyn_dis_cc = 1 // Deep inelastic charged current dyn_dis_nc = 0 // Deep inelastic neutral current dyn_coh_cc = 1 // Coherent charged current dyn_coh_nc = 0 // Coherent neutral current dyn_mec_cc = 1 // Meson exchange charged current dyn_mec_nc = 0 // Meson exchange neutral current and modify according to your needs. In this case turn on only CC interactions.","title":"2. Setting dynamics"},{"location":"getting-started/running/#3-running-simulations","text":"As we are going to change only nucleus model we may use the same base settings file for all three simulations. For (global) Fermi gas you have to set nucleus_target = 1 and you may want to make sure that spectral function is disabled ( sf_method ): nuwro -i numi_cc_ch.txt \\ -p nucleus_target = 1 \\ -p sf_method = 0 \\ -o numi_cc_ch_gfg.root In the similar way you can perform the simulation for local Fermi gas: nuwro -i numi_cc_ch.txt \\ -p nucleus_target = 2 \\ -p sf_method = 0 \\ -o numi_cc_ch_lfg.root and for spectral function: nuwro -i numi_cc_ch.txt \\ -p nucleus_target = 2 \\ -p sf_method = 1 \\ -o numi_cc_ch_sf.root Spectral function is applied only for (quasi-)elastic dynamics. For others the model set by nucleus_target is used.","title":"3. Running simulations"}]}